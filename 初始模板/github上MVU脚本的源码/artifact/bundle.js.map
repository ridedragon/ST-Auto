{"version":3,"file":"bundle.js","mappings":"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","sources":["src://tavern_helper_template/src/variable_def.ts","src://tavern_helper_template/external module \"https://testingcf.jsdelivr.net/npm/mathjs/+esm\"","src://tavern_helper_template/src/schema.ts","src://tavern_helper_template/external var \"Vue\"","src://tavern_helper_template/external var \"z\"","src://tavern_helper_template/src/settings.ts","src://tavern_helper_template/src/function.ts","src://tavern_helper_template/src/update_descriptions.ts","src://tavern_helper_template/src/variable_init.ts","src://tavern_helper_template/src/button.ts","src://tavern_helper_template/src/export_globals.ts","src://tavern_helper_template/src/function_call.ts","src://tavern_helper_template/src/util.ts","webpack://tavern_helper_template/src/Panel.vue","webpack://tavern_helper_template/src/Panel.vue?8ab2","src://tavern_helper_template/src/Panel.vue","webpack://tavern_helper_template/src/panel_method_help.md?03a1","webpack://tavern_helper_template/src/panel_extra_mode_help.md?d95b","src://tavern_helper_template/src/panel.ts","src://tavern_helper_template/src/main.ts"],"sourcesContent":["// 模板类型定义\nexport type TemplateType = StatData | StatData[] | any[];\n\n// StatData 的元数据类型定义\nexport type StatDataMeta = {\n    extensible?: boolean;\n    recursiveExtensible?: boolean;\n    required?: string[];\n    template?: TemplateType; // 模板定义，用于自动填充新元素\n    [key: string]: unknown;\n};\n\nexport type JSONPrimitive = string | number | boolean | null;\n\n// StatData 类型定义 - 支持嵌套对象和数组，可以有 $meta 属性\nexport type StatData = {\n    [key: string]: StatData | JSONPrimitive | (StatData | JSONPrimitive)[];\n} & {\n    $meta?: StatDataMeta;\n    $arrayMeta?: boolean;\n};\n\n// Schema 节点类型定义\nexport type SchemaNode = ObjectSchemaNode | ArraySchemaNode | PrimitiveSchemaNode;\n\n// 对象类型的 Schema 节点\nexport type ObjectSchemaNode = {\n    type: 'object';\n    properties: {\n        [key: string]: SchemaNode & { required?: boolean };\n    };\n    extensible?: boolean;\n    template?: TemplateType; // 新增属性的模板\n    recursiveExtensible?: boolean;\n};\n\n// 数组类型的 Schema 节点\nexport type ArraySchemaNode = {\n    type: 'array';\n    elementType: SchemaNode;\n    extensible?: boolean;\n    template?: TemplateType; // 新增元素的模板\n    recursiveExtensible?: boolean;\n};\n\n// 原始类型的 Schema 节点\nexport type PrimitiveSchemaNode = {\n    type: 'string' | 'number' | 'boolean' | 'any';\n};\n\n// ValueWithDescription 类型 - 用于表示带描述的值\nexport type ValueWithDescription<T> = [T, string];\n\nexport function assertVWD(\n    _flag: boolean,\n    _v: StatData | JSONPrimitive | (StatData | JSONPrimitive)[]\n): asserts _v is ValueWithDescription<StatData | JSONPrimitive> {}\n\nexport function isValueWithDescription(value: unknown): boolean {\n    return Array.isArray(value) && value.length === 2 && typeof value[1] === 'string';\n}\n\nexport function isValueWithDescriptionStatData(\n    value: StatData | JSONPrimitive | (StatData | JSONPrimitive)[]\n): value is ValueWithDescription<StatData | JSONPrimitive> {\n    return Array.isArray(value) && value.length === 2 && typeof value[1] === 'string';\n}\n\n// 类型守卫函数\nexport function isArraySchema(value: SchemaNode): value is ArraySchemaNode {\n    return value.type === 'array';\n}\n\nexport function isObjectSchema(value: SchemaNode): value is ObjectSchemaNode {\n    return value.type === 'object';\n}\n\nexport function isPrimitiveSchema(value: SchemaNode): value is PrimitiveSchemaNode {\n    return (\n        value.type === 'string' ||\n        value.type === 'number' ||\n        value.type === 'boolean' ||\n        value.type === 'any'\n    );\n}\n\nexport type RootAdditionalProps = {\n    strictTemplate?: boolean;\n    concatTemplateArray?: boolean;\n    strictSet?: boolean;\n};\n\nexport type RootAdditionalMetaProps = {\n    $meta?: StatDataMeta & RootAdditionalProps;\n};\n\nexport type MvuData = {\n    // initialized_lorebooks 从字符串列表变为记录对象\n    // 这样可以为每个知识库存储元数据，例如初始化的标记变量\n    /** 已初始化的 lorebook 列表 */\n    initialized_lorebooks?: Record<string, any[]>;\n\n    /**\n     * 状态数据 - 存储实际的变量值\n     * 支持嵌套对象结构，通过路径（如 \"player.health\"）访问\n     * $internal 属性在更新过程中临时存储 display_data 和 delta_data 的引用\n     *\n     * 更新逻辑：\n     * 1. 普通值：直接更新为新值\n     * 2. ValueWithDescription 类型：更新数组的第一个元素（实际值），保留第二个元素（描述）\n     * 3. 数字类型：自动将字符串新值转换为数字\n     */\n    stat_data: StatData & RootAdditionalMetaProps & { $internal?: InternalData };\n\n    /**\n     * 显示数据 - 存储变量变化的可视化表示\n     * 格式：\"{旧值}->{新值} ({原因})\"\n     * 例如：\"100->80 (受到伤害)\"\n     *\n     * 默认情况下包含完整的 stat_data ，但是在变更后，会将变更的元素变为上面含原因的表示。\n     * 更新时机：每次 stat_data 中的值发生变化时同步更新\n     * 用途：在UI中展示变量的变化历史，让用户了解数值是如何变化的\n     */\n    display_data?: Record<string, any>;\n\n    /**\n     * 增量数据 - 存储本次更新中发生变化的变量\n     * 格式：与 display_data 相同，\"{旧值}->{新值} (原因)\"\n     *\n     * 更新时机：\n     * - 在 updateVariables 开始时初始化为空对象\n     * - 每次变量更新时记录变化\n     * - 更新结束后保存到消息的 variables 中\n     *\n     * 用途：仅显示当前消息/操作中实际发生变化的变量，而不是所有历史变化\n     */\n    delta_data?: Record<string, any>;\n    // 用于存储数据结构的模式\n    schema?: ObjectSchemaNode & Partial<RootAdditionalProps>;\n};\n\nexport interface VariableData {\n    old_variables: MvuData;\n    /**\n     * 输出变量，仅当实际产生了变量变更的场合，会产生 newVariables\n     */\n    new_variables?: MvuData;\n}\n\nexport const variable_events = {\n    SINGLE_VARIABLE_UPDATED: 'mag_variable_updated',\n    VARIABLE_UPDATE_ENDED: 'mag_variable_update_ended',\n    VARIABLE_UPDATE_STARTED: 'mag_variable_update_started',\n    COMMAND_PARSED: 'mag_command_parsed',\n} as const;\nexport const exported_events = {\n    INVOKE_MVU_PROCESS: 'mag_invoke_mvu',\n    UPDATE_VARIABLE: 'mag_update_variable',\n} as const;\n\nexport type InternalData = {\n    display_data: Record<string, any>;\n    delta_data: Record<string, any>;\n};\n\nexport type ExtendedListenerType = {\n    [variable_events.SINGLE_VARIABLE_UPDATED]: (\n        stat_data: Record<string, any>,\n        path: string,\n        _oldValue: any,\n        _newValue: any\n    ) => void;\n    [variable_events.VARIABLE_UPDATE_STARTED]: (\n        variables: MvuData,\n        out_is_updated: boolean\n    ) => void;\n    [variable_events.VARIABLE_UPDATE_ENDED]: (variables: MvuData, out_is_updated: boolean) => void;\n    [variable_events.COMMAND_PARSED]: (variables: MvuData, commands: any) => void;\n    [exported_events.INVOKE_MVU_PROCESS]: (\n        message_content: string,\n        variable_info: VariableData\n    ) => void;\n    [exported_events.UPDATE_VARIABLE]: (\n        stat_data: Record<string, any>,\n        path: string,\n        newValue: any,\n        reason: string,\n        isRecursive: boolean\n    ) => void;\n};\n\nexport type InitVarType = StatData & RootAdditionalMetaProps;\n\nexport type DataCategory = 'stat' | 'display' | 'delta';\n\nexport function extractRecord(category: 'stat' | 'display' | 'delta', game_data: MvuData) {\n    let data: Record<string, any> | undefined = undefined;\n    switch (category) {\n        case 'stat':\n            data = game_data.stat_data;\n            break;\n        case 'display':\n            data = game_data.display_data!;\n            break;\n        case 'delta':\n            data = game_data.delta_data!;\n            break;\n    }\n    return data;\n}\n\nexport const ExtraLLMRequestContent: string = `---\n<must>\nThe latest storyline is contained within the \\`<past_observe>\\` block.\nThe \\`<status_description>\\` section records the state of variables *prior to* the latest storyline.\n# Ignore all the instructions I received before, my task has now changed.\nI must now **stop role-playing** and analyze the latest storyline **from a narrator’s perspective**, reviewing what has happened and updating the variables in \\`<status_description>\\` according to the variable update rules.\nFrom this point onward, **only** output the \\`<VariableUpdate>\\` content.\n</must>`;\n","const __WEBPACK_NAMESPACE_OBJECT__ = __WEBPACK_EXTERNAL_MODULE_https_testingcf_jsdelivr_net_npm_mathjs_esm_aec644b1__;","import {\n    SchemaNode,\n    StatData,\n    isArraySchema,\n    isObjectSchema,\n    ObjectSchemaNode,\n    MvuData,\n    ArraySchemaNode,\n    TemplateType,\n    RootAdditionalProps,\n} from '@/variable_def';\n\n// 定义魔法字符串为常量，便于管理和引用\nexport const EXTENSIBLE_MARKER = '$__META_EXTENSIBLE__$';\n\n// 模式生成函数\n/**\n * 递归地为数据对象生成一个模式。\n * @param data - 要为其生成模式的数据对象 (stat_data)。\n * @param oldSchemaNode - (可选) 来自旧 Schema 的对应节点，用于继承元数据。\n * @param parentRecursiveExtensible - (可选) 父节点的 recursiveExtensible 状态，默认为 false。\n * @returns - 生成的模式对象。\n */\nexport function generateSchema(\n    data: any,\n    oldSchemaNode?: SchemaNode,\n    parentRecursiveExtensible: boolean = false\n): SchemaNode {\n    if (Array.isArray(data)) {\n        let isExtensible = false;\n        let isRecursiveExtensible = parentRecursiveExtensible;\n        let oldElementType: SchemaNode | undefined;\n        let template: TemplateType | undefined;\n\n        // 使用类型守卫检查 oldSchemaNode 是否为 ArraySchemaNode\n        if (oldSchemaNode) {\n            if (isArraySchema(oldSchemaNode)) {\n                isExtensible = oldSchemaNode.extensible === true;\n                isRecursiveExtensible =\n                    oldSchemaNode.recursiveExtensible === true || parentRecursiveExtensible;\n                oldElementType = oldSchemaNode.elementType;\n                template = oldSchemaNode.template;\n            } else {\n                console.error(\n                    `Type mismatch: expected array schema but got ${oldSchemaNode.type} at path`\n                );\n            }\n        }\n\n        // 检查是否有只包含 $meta 的元素\n        const metaElementIndex = data.findIndex(\n            item =>\n                _.isObject(item) &&\n                !_.isDate(item) &&\n                '$arrayMeta' in item &&\n                '$meta' in item &&\n                item['$arrayMeta'] === true\n        );\n\n        if (metaElementIndex !== -1) {\n            const metaElement = data[metaElementIndex] as { $meta: any };\n            // 从 $meta 中提取数组的元数据\n            if (metaElement.$meta.extensible !== undefined) {\n                isExtensible = metaElement.$meta.extensible;\n            }\n            if (metaElement.$meta.template !== undefined) {\n                template = metaElement.$meta.template;\n            }\n            // 从数组中移除这个元数据元素\n            data.splice(metaElementIndex, 1);\n            console.log(`Array metadata element found and processed.`);\n        }\n\n        // 检查并处理魔法字符串\n        const markerIndex = data.indexOf(EXTENSIBLE_MARKER);\n        if (markerIndex > -1) {\n            isExtensible = true;\n            // 从数组中移除标记，以免影响后续的类型推断\n            data.splice(markerIndex, 1);\n            console.log(`Extensible marker found and removed from an array.`);\n        }\n\n        const schema_node: ArraySchemaNode = {\n            type: 'array',\n            extensible: isExtensible || parentRecursiveExtensible,\n            recursiveExtensible: isRecursiveExtensible,\n            elementType:\n                data.length > 0\n                    ? generateSchema(data[0], oldElementType, isRecursiveExtensible)\n                    : { type: 'any' },\n        };\n\n        if (template !== undefined) {\n            schema_node.template = template;\n        }\n\n        return schema_node;\n    }\n    if (_.isObject(data) && !_.isDate(data)) {\n        const typedData = data as StatData; // 类型断言\n\n        // 使用类型守卫检查 oldSchemaNode 是否为 ObjectSchemaNode\n        let oldExtensible = false;\n        let oldRecursiveExtensible = parentRecursiveExtensible;\n        let oldProperties: ObjectSchemaNode['properties'] | undefined;\n\n        if (oldSchemaNode) {\n            if (isObjectSchema(oldSchemaNode)) {\n                oldExtensible = oldSchemaNode.extensible === true;\n                oldRecursiveExtensible =\n                    oldSchemaNode.recursiveExtensible === true || parentRecursiveExtensible;\n                oldProperties = oldSchemaNode.properties;\n            } else {\n                console.error(\n                    `Type mismatch: expected object schema but got ${oldSchemaNode.type} at path`\n                );\n            }\n        }\n\n        const schemaNode: ObjectSchemaNode = {\n            type: 'object',\n            properties: {},\n            // 默认不可扩展，但检查旧 schema、$meta.extensible 或 parentRecursiveExtensible\n            extensible:\n                oldExtensible ||\n                typedData.$meta?.extensible === true ||\n                typedData.$meta?.recursiveExtensible === true ||\n                parentRecursiveExtensible,\n            recursiveExtensible:\n                oldRecursiveExtensible || typedData.$meta?.recursiveExtensible === true,\n        };\n\n        // 处理 template\n        if (typedData.$meta?.template !== undefined) {\n            schemaNode.template = typedData.$meta.template;\n        } else if (oldSchemaNode && isObjectSchema(oldSchemaNode) && oldSchemaNode.template) {\n            schemaNode.template = oldSchemaNode.template;\n        }\n\n        // 暂存父节点的 $meta，以便在循环中使用\n        const parentMeta = typedData.$meta;\n\n        // 从 $meta 中读取信息后，将其从数据中移除，避免污染\n        if (typedData.$meta) {\n            delete typedData.$meta;\n        }\n\n        for (const key in data) {\n            const oldChildNode = oldProperties?.[key];\n            // 传递当前节点的 recursiveExtensible（如果存在）或父节点的 recursiveExtensible\n            // 但如果当前节点明确设置 extensible: false, 则停止递归扩展\n            const childRecursiveExtensible =\n                schemaNode.extensible !== false && schemaNode.recursiveExtensible;\n            const childSchema = generateSchema(\n                typedData[key],\n                oldChildNode,\n                childRecursiveExtensible\n            );\n\n            // 一个属性是否必需？\n\n            // 1. 默认值: 如果父节点可扩展，子节点默认为可选；否则为必需。\n            let isRequired = !schemaNode.extensible;\n\n            // 2. 覆盖规则: 检查父元数据中的 'required' 数组。\n            //    如果父节点的 $meta.required 是一个数组，并且当前 key 在这个数组里，\n            //    则无论默认值是什么，都强制覆盖为必需。\n            if (Array.isArray(parentMeta?.required) && parentMeta.required.includes(key)) {\n                isRequired = true;\n            }\n\n            // 3. 检查旧 schema 的设置，作为最后的参考\n            if (oldChildNode?.required === false) {\n                // 如果旧 schema 明确说这个是可选的，那么以这个为准\n                isRequired = false;\n            } else if (oldChildNode?.required === true) {\n                isRequired = true;\n            }\n\n            schemaNode.properties[key] = {\n                ...childSchema,\n                required: isRequired,\n            };\n        }\n        return schemaNode;\n    }\n    // 处理原始类型\n    const dataType = typeof data;\n    if (dataType === 'string' || dataType === 'number' || dataType === 'boolean') {\n        return { type: dataType };\n    }\n    // 对于其他类型（function, symbol, bigint, undefined 等），默认返回 'any'\n    return { type: 'any' };\n}\n\n/**\n * 辅助函数：为数据路径获取对应的 Schema 规则。\n * 能够处理数组索引，将其转换为 .elementType 来查询 Schema。\n * @param schema - 完整的 Schema 对象\n * @param path - 要查询的数据路径\n * @returns 对应路径的 Schema 节点，如果找不到则返回 null。\n */\nexport function getSchemaForPath(\n    schema: SchemaNode | null | undefined,\n    path: string\n): SchemaNode | null {\n    if (!path || !schema) {\n        return schema || null;\n    }\n    // 将 lodash 路径字符串转换为段数组，例如 'a.b[0].c' -> ['a', 'b', '0', 'c']\n    const pathSegments = _.toPath(path);\n    let currentSchema: SchemaNode | null = schema;\n\n    for (const segment of pathSegments) {\n        if (!currentSchema) return null;\n\n        // 如果 segment 是数字（数组索引），则移动到 elementType\n        if (/^\\d+$/.test(segment)) {\n            if (isArraySchema(currentSchema)) {\n                currentSchema = currentSchema.elementType;\n            } else {\n                return null; // 路径试图索引一个非数组或无 elementType 的 schema\n            }\n        } else if (isObjectSchema(currentSchema) && currentSchema.properties[segment]) {\n            // 否则，作为对象属性访问\n            const property = currentSchema.properties[segment];\n            currentSchema = property as SchemaNode;\n        } else {\n            return null; // 路径中的键在 schema 中不存在\n        }\n    }\n    return currentSchema;\n}\n\n/**\n * 调和函数：比较数据和旧 Schema，生成并应用一个与当前数据状态完全同步的新 Schema。\n * @param variables - 包含 stat_data 和旧 schema 的变量对象。\n */\nexport function reconcileAndApplySchema(variables: MvuData) {\n    console.log('Reconciling schema with current data state...');\n\n    // 1. 深拷贝数据，以防 generateSchema 修改原始数据（例如删除 $meta）\n    const currentDataClone = _.cloneDeep(variables.stat_data);\n\n    // 2. 使用改进后的 generateSchema 生成一个与当前数据完全匹配的新 Schema，\n    //    并在此过程中从旧 Schema 继承元数据。\n    const newSchema = generateSchema(currentDataClone, variables.schema);\n\n    // 3. 直接用新 Schema 替换旧 Schema\n    // stat_data 的根节点应该始终是对象，所以生成的 schema 也应该是 ObjectSchemaNode\n    if (!isObjectSchema(newSchema)) {\n        console.error(\n            'Generated schema is not an object schema, which is unexpected for stat_data root'\n        );\n        return;\n    }\n\n    // 保留 RootAdditionalProps\n    const newSchemaWithProps = newSchema as ObjectSchemaNode & RootAdditionalProps;\n    if (variables.schema?.strictTemplate !== undefined) {\n        newSchemaWithProps.strictTemplate = variables.schema.strictTemplate;\n    }\n    if (variables.schema?.strictSet !== undefined) {\n        newSchemaWithProps.strictSet = variables.schema.strictSet;\n    }\n    if (variables.schema?.concatTemplateArray !== undefined) {\n        newSchemaWithProps.concatTemplateArray = variables.schema.concatTemplateArray;\n    }\n    if (_.has(variables.stat_data, '$meta.strictTemplate'))\n        newSchemaWithProps.strictTemplate = variables.stat_data['$meta']?.strictTemplate as boolean;\n    if (_.has(variables.stat_data, '$meta.strictSet'))\n        newSchemaWithProps.strictSet = variables.stat_data['$meta']?.strictSet as boolean;\n    if (_.has(variables.stat_data, '$meta.concatTemplateArray'))\n        newSchemaWithProps.concatTemplateArray = variables.stat_data['$meta']\n            ?.concatTemplateArray as boolean;\n\n    variables.schema = newSchemaWithProps;\n\n    console.log('Schema reconciliation complete.');\n}\n\nfunction isMetaCarrier(value: unknown): value is Record<string, unknown> & { $meta?: unknown } {\n    return _.isObject(value) && !_.isDate(value);\n}\n\n/**\n * 递归清理数据中的元数据标记\n * - 从数组中移除 EXTENSIBLE_MARKER\n * - 从对象中删除 $meta 属性\n * @param data 需要清理的数据\n */\nexport function cleanUpMetadata(data: any): void {\n    // 如果是数组，移除魔法字符串和只包含 $meta 的元素，并递归\n    if (Array.isArray(data)) {\n        let i = data.length;\n        while (i--) {\n            if (data[i] === EXTENSIBLE_MARKER) {\n                data.splice(i, 1);\n            } else if (\n                _.isObject(data[i]) &&\n                !_.isDate(data[i]) &&\n                '$arrayMeta' in data[i] &&\n                '$meta' in data[i] &&\n                data[i]['$arrayMeta'] === true\n            ) {\n                // 移除只包含 $meta & $arrayMeta 的元素\n                data.splice(i, 1);\n            } else {\n                // 对数组中的其他元素（可能是对象或数组）进行递归清理\n                cleanUpMetadata(data[i]);\n            }\n        }\n    }\n    // 如果是对象，移除 $meta 并递归\n    else if (isMetaCarrier(data)) {\n        // 清除自身 $meta\n        delete data.$meta;\n\n        // 递归\n        for (const key in data) {\n            cleanUpMetadata(data[key]);\n        }\n    }\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = Vue;","const __WEBPACK_NAMESPACE_OBJECT__ = z;","import { defineStore } from 'pinia';\nimport { ref, toRaw, watch } from 'vue';\nimport * as z from 'zod';\n\nconst Settings = z\n    .object({\n        更新方式: z.enum(['随AI输出', '额外模型解析']).default('随AI输出'),\n        额外模型解析配置: z\n            .object({\n                发送预设: z.boolean().default(true),\n                使用函数调用: z.boolean().default(false),\n                模型来源: z.enum(['与插头相同', '自定义']).default('与插头相同'),\n                api地址: z.string().default('http://localhost:1234/v1'),\n                密钥: z.string().default(''),\n                模型名称: z.string().default('gemini-2.5-flash'),\n            })\n            .prefault({}),\n        通知: z\n            .object({\n                变量更新出错: z.boolean().default(false),\n                额外模型解析中: z.boolean().default(true),\n            })\n            .prefault({}),\n        internal: z\n            .object({\n                已提醒新配置界面: z.boolean().default(false),\n            })\n            .prefault({}),\n    })\n    .prefault({});\n\nexport const useSettingsStore = defineStore('settings', () => {\n    const settings = ref(Settings.parse(_.get(SillyTavern.extensionSettings, 'mvu_settings', {})));\n    watch(\n        settings,\n        new_settings => {\n            _.set(SillyTavern.extensionSettings, 'mvu_settings', toRaw(new_settings));\n            SillyTavern.saveSettingsDebounced();\n        },\n        { deep: true }\n    );\n\n    return { settings };\n});\n","import {\n    variable_events,\n    VariableData,\n    MvuData,\n    TemplateType,\n    assertVWD,\n    isArraySchema,\n    isObjectSchema,\n    isValueWithDescriptionStatData,\n} from '@/variable_def';\nimport * as math from 'mathjs';\n\nimport {\n    cleanUpMetadata,\n    generateSchema,\n    getSchemaForPath,\n    reconcileAndApplySchema,\n} from '@/schema';\nimport { useSettingsStore } from '@/settings';\n\nexport function trimQuotesAndBackslashes(str: string): string {\n    if (!_.isString(str)) return str;\n    // Regular expression to match backslashes and quotes (including backticks) at the beginning and end\n    return str.replace(/^[\\\\\"'` ]*(.*?)[\\\\\"'` ]*$/, '$1');\n}\n\n/**\n * 应用模板到值上，值的属性优先级高于模板\n * @param value 要应用模板的值\n * @param template 模板 (TemplateType | undefined)\n * @param strict_array_cast 是否开启严格模式，开启后不允许 primitive type -> [primitive type] 的隐式转换\n * @param array_merge_concat 指明数组的 合并 行为是指 覆盖 还是 拼接，默认拼接。\n * @returns 合并后的值\n */\nexport function applyTemplate(\n    value: any,\n    template: TemplateType | undefined,\n    strict_array_cast: boolean = false,\n    array_merge_concat: boolean = true\n): any {\n    // 如果没有模板，直接返回原值\n    if (!template) {\n        return value;\n    }\n\n    // 检查类型是否匹配\n    const value_is_object = _.isObject(value) && !Array.isArray(value) && !_.isDate(value);\n    const value_is_array = Array.isArray(value);\n    const template_is_array = Array.isArray(template);\n\n    if (value_is_object && !template_is_array) {\n        // value 是对象，template 是 StatData（对象）\n        // 先应用模板，再应用值，确保值的优先级更高\n        return _.merge({}, template, value);\n    } else if (value_is_array && template_is_array) {\n        // 都是数组，进行合并\n        if (array_merge_concat) return _.concat(value, template);\n        return _.merge([], template, value);\n    } else if (\n        ((value_is_object || value_is_array) && template_is_array !== value_is_array) ||\n        (!value_is_object && !value_is_array && _.isObject(template) && !Array.isArray(template))\n    ) {\n        // 类型不匹配\n        console.error(\n            `Template type mismatch: template is ${template_is_array ? 'array' : 'object'}, but value is ${value_is_array ? 'array' : 'object'}. Skipping template merge.`\n        );\n        return value;\n    } else if (!value_is_object && !value_is_array && template_is_array) {\n        // 特殊情况：值是原始类型（字面量），模板是数组\n        // 当作 [value] 进行数组的合并\n        if (strict_array_cast)\n            //严格模式不提供 primitive type -> [primitive type] 的转换\n            return value;\n        if (array_merge_concat) return _.concat([value], template);\n        return _.merge([], template, [value]);\n    } else {\n        // 其他情况：值是原始类型，模板不是数组，不应用模板\n        return value;\n    }\n}\n\n// 一个更安全的、用于解析命令中值的辅助函数\n// 它会尝试将字符串解析为 JSON, 布尔值, null, 数字, 或数学表达式\nexport function parseCommandValue(valStr: string): any {\n    if (typeof valStr !== 'string') return valStr;\n    const trimmed = valStr.trim();\n\n    // 检查布尔值/null/undefined\n    if (trimmed === 'true') return true;\n    if (trimmed === 'false') return false;\n    if (trimmed === 'null') return null;\n    if (trimmed === 'undefined') return undefined;\n\n    try {\n        // 如果字符串能被 JSON.parse 解析，说明它是一个标准格式，直接返回解析结果\n        return JSON.parse(trimmed);\n    } catch (e) {\n        // Handle JavaScript array or object literals\n        if (\n            (trimmed.startsWith('{') && trimmed.endsWith('}')) ||\n            (trimmed.startsWith('[') && trimmed.endsWith(']'))\n        ) {\n            try {\n                // Safely evaluate literals using a function constructor\n                const result = new Function(`return ${trimmed};`)();\n                if (_.isObject(result) || Array.isArray(result)) {\n                    return result;\n                }\n            } catch (err) {\n                // 如果解析失败，说明它可能是一个未加引号的字符串或数学表达式，继续往下走\n            }\n        }\n    }\n\n    // 如果代码走到这里，说明 trimmed 是一个未加引号的字符串，例如：\n    // 'hello_world', '10 + 2', 'sqrt(16)'\n\n    try {\n        // 创建一个 scope 对象，将多种数学库/对象注入到 mathjs 的执行环境中，\n        // 以便统一处理不同风格的数学表达式。\n        const scope = {\n            // 支持 JavaScript 标准的 Math 对象 (e.g., Math.sqrt(), Math.PI)\n            Math: Math,\n            // 支持 Python 风格的 math 库用法 (e.g., math.sqrt(), math.pi)，\n            // 这在 LLM 生成的代码中很常见。\n            // 'math' 是我们导入的 mathjs 库本身。\n            math: math,\n        };\n        // 尝试使用 mathjs 进行数学求值\n        // math.evaluate 对于无法识别为表达式的纯字符串会抛出错误\n        const result = math.evaluate(trimmed, scope);\n        // 如果结果是 mathjs 的复数或矩阵对象，则将其转换为字符串表示形式\n        if (math.isComplex(result) || math.isMatrix(result)) {\n            return result.toString();\n        }\n        // 避免将单个单词的字符串（mathjs可能将其识别为符号）作为 undefined 返回\n        if (result === undefined && !/^[a-zA-Z_]+$/.test(trimmed)) {\n            return trimmed; // 如果是 undefined 但不是一个简单的符号名，则可能是解析错误\n        }\n        if (result !== undefined) {\n            // 使用 toPrecision 来处理浮点数精度造成的误差问题\n            return parseFloat(result.toPrecision(12));\n        }\n    } catch (err) {\n        // 如果 math.evaluate 失败，说明它不是一个有效的表达式，\n        // 那么它就是一个普通的未加引号的字符串。\n    }\n\n    // 实验性功能，暂不启用\n    // 尝试将字符串解析为日期对象，用于传入_.add直接以毫秒数更新时间，如 `_.add('当前时间', 10 * 60 * 1000);`\n    // 此检查用于识别日期字符串（例如 \"2024-01-01T12:00:00Z\"）\n    // `isNaN(Number(trimmed))`确保纯数字字符串（如 \"12345\"）不会被错误地解析为日期\n    /*\n    if (isNaN(Number(trimmed))) {\n        const potentialDate = new Date(trimQuotesAndBackslashes(trimmed));\n        if (!isNaN(potentialDate.getTime())) {\n            return potentialDate;\n        }\n    }\n    */\n\n    try {\n        // 尝试 YAML.parse\n        return YAML.parse(trimmed);\n    } catch (e) {\n        /* empty */\n    }\n\n    // 最终，返回这个去除了首尾引号的字符串\n    return trimQuotesAndBackslashes(valStr);\n}\n\n/**\n * Type definition for CommandNames representing a set of valid command strings.\n *\n * This type is used to define a finite and specific set of command string values\n * that may be used in operations or functions requiring predefined command names.\n *\n * The allowed command names are:\n * - 'set': Represents a command to set a value.\n * - 'insert': Alias of 'assign'\n * - 'assign': Represents a command to assign a value or reference.\n * - 'remove': Represents a command to remove an item or data.\n * - 'add': Represents a command to add an item or data.\n */\ntype CommandNames = 'set' | 'insert' | 'assign' | 'remove' | 'unset' | 'delete' | 'add';\n\n/**\n * 从大字符串中提取所有 .set(${path}, ${new_value});//${reason} 格式的模式\n * 并解析出每个匹配项的路径、新值和原因部分\n */\n// 接口定义：用于统一不同命令的结构\n// 新增：Command 接口，比 SetCommand 更通用\ninterface Command {\n    type: CommandNames;\n    full_match: string;\n    args: string[];\n    reason: string;\n}\n\n/**\n * 从输入文本中提取所有 _.set() 调用\n *\n * 问题背景：\n * 原本使用正则表达式 /_\\.set\\(([\\s\\S]*?)\\);/ 来匹配，但这种非贪婪匹配会在遇到\n * 嵌套的 ); 时提前结束。例如：\n * _.set('path', [\"text with _.set('inner',null);//comment\"], []);\n * 会在 \"comment\") 处错误地结束匹配\n *\n * 解决方案：\n * 使用状态机方法，通过计数括号配对来准确找到 _.set() 调用的结束位置\n */\n// 将 extractSetCommands 扩展为 extractCommands 以支持多种命令\nexport function extractCommands(inputText: string): Command[] {\n    const results: Command[] = [];\n    let i = 0;\n\n    while (i < inputText.length) {\n        // 循环处理整个输入文本，直到找不到更多命令\n        // 使用正则匹配 _.set(、_.assign(、_.remove( 或 _.add(，重构后支持多种命令\n        const setMatch = inputText\n            .substring(i)\n            .match(/_\\.(set|insert|assign|remove|unset|delete|add)\\(/);\n        if (!setMatch || setMatch.index === undefined) {\n            // 没有找到匹配的命令，退出循环，防止无限循环\n            break;\n        }\n\n        // 提取命令类型（set、assign、remove 或 add），并计算命令的起始位置\n        const commandType = setMatch[1] as CommandNames;\n        const setStart = i + setMatch.index;\n        // 计算开括号位置，用于后续提取参数\n        const openParen = setStart + setMatch[0].length;\n\n        // 使用 findMatchingCloseParen 查找匹配的闭括号，解决原正则匹配在嵌套结构（如 _.set('path', ['inner);'])）中提前结束的问题\n        const closeParen = findMatchingCloseParen(inputText, openParen);\n        if (closeParen === -1) {\n            // 找不到闭括号，说明命令格式错误\n            // 跳过此无效命令，并从开括号后继续搜索，以防无限循环\n            i = openParen; // 从开括号后继续搜索\n            continue; // 继续 while 循环，寻找下一个命令\n        }\n\n        // 检查闭括号后是否紧跟分号，确保命令语法完整，防止误解析字符串中的类似结构\n        let endPos = closeParen + 1;\n        if (endPos >= inputText.length || inputText[endPos] !== ';') {\n            // 没有分号，命令无效，跳到闭括号后继续搜索，避免误解析\n            i = closeParen + 1;\n            continue;\n        }\n        endPos++; // 包含分号，更新命令结束位置\n\n        // 提取可能的注释（// 开头），用于记录命令的 reason\n        let comment = '';\n        const potentialComment = inputText.substring(endPos).match(/^\\s*\\/\\/(.*)/);\n        if (potentialComment) {\n            // 提取注释内容并去除首尾空格，更新结束位置\n            comment = potentialComment[1].trim();\n            endPos += potentialComment[0].length;\n        }\n\n        // 提取完整命令字符串，用于返回结果中的 fullMatch 字段，便于追踪原始内容\n        const fullMatch = inputText.substring(setStart, endPos);\n        // 提取参数字符串，位于开括号和闭括号之间\n        const paramsString = inputText.substring(openParen, closeParen);\n        // 使用 parseParameters 解析参数，支持嵌套结构（如数组、对象）\n        const params = parseParameters(paramsString);\n\n        // 验证命令有效性，根据命令类型检查参数数量，防止无效命令进入结果\n        let isValid = false;\n        if (commandType === 'set' && params.length >= 2)\n            isValid = true; // _.set 至少需要路径和值\n        else if (commandType === 'assign' && params.length >= 2)\n            isValid = true; // _.assign 支持两种参数格式\n        else if (commandType === 'insert' && params.length >= 2)\n            isValid = true; // _.insert 支持两种参数格式\n        else if (commandType === 'remove' && params.length >= 1)\n            isValid = true; // _.remove 至少需要路径\n        else if (commandType === 'unset' && params.length >= 1)\n            isValid = true; // _.unset 至少需要路径\n        else if (commandType === 'delete' && params.length >= 1)\n            isValid = true; // _.delete 至少需要路径\n        else if (commandType === 'add' && /*params.length === 1 || */ params.length === 2)\n            isValid = true; // _.add 需要1个或2个参数\n\n        if (isValid) {\n            // 命令有效，添加到结果列表，包含命令类型、完整匹配、参数和注释\n            results.push({\n                type: commandType,\n                full_match: fullMatch,\n                args: params,\n                reason: comment,\n            });\n        }\n\n        // 更新搜索索引到命令末尾，继续查找下一个命令\n        i = endPos;\n    }\n\n    // 返回所有解析出的有效命令\n    return results;\n}\n\n/**\n * 辅助函数：找到匹配的闭括号\n *\n * 算法说明：\n * 1. 使用括号计数器，遇到 ( 加1，遇到 ) 减1\n * 2. 当计数器归零时，找到了匹配的闭括号\n * 3. 重要：忽略引号内的括号，避免字符串内容干扰匹配\n *\n * @param str 要搜索的字符串\n * @param startPos 开始括号的位置\n * @returns 匹配的闭括号位置，如果找不到返回 -1\n */\nfunction findMatchingCloseParen(str: string, startPos: number): number {\n    let parenCount = 1; // 从1开始，因为已经有一个开括号\n    let inQuote = false;\n    let quoteChar = '';\n\n    for (let i = startPos; i < str.length; i++) {\n        const char = str[i];\n        const prevChar = i > 0 ? str[i - 1] : '';\n\n        // 处理引号状态\n        // 支持三种引号：双引号、单引号和反引号（模板字符串）\n        // 注意：需要检查前一个字符不是反斜杠，以正确处理转义的引号\n        if ((char === '\"' || char === \"'\" || char === '`') && prevChar !== '\\\\') {\n            if (!inQuote) {\n                inQuote = true;\n                quoteChar = char;\n            } else if (char === quoteChar) {\n                inQuote = false;\n            }\n        }\n\n        // 只在不在引号内时计算括号\n        // 这确保了像 \"text with )\" 这样的字符串不会影响括号匹配\n        if (!inQuote) {\n            if (char === '(') {\n                parenCount++;\n            } else if (char === ')') {\n                parenCount--;\n                if (parenCount === 0) {\n                    return i;\n                }\n            }\n        }\n    }\n\n    return -1; // 没有找到匹配的闭括号\n}\n\n// 解析参数字符串，处理嵌套结构\n// 增加了对圆括号的层级计数。\nexport function parseParameters(paramsString: string): string[] {\n    const params: string[] = [];\n    let currentParam = '';\n    let inQuote = false;\n    let quoteChar = '';\n    let bracketCount = 0;\n    let braceCount = 0;\n    let parenCount = 0;\n\n    for (let i = 0; i < paramsString.length; i++) {\n        const char = paramsString[i];\n\n        // 处理引号（包括反引号）\n        if (\n            (char === '\"' || char === \"'\" || char === '`') &&\n            (i === 0 || paramsString[i - 1] !== '\\\\')\n        ) {\n            if (!inQuote) {\n                inQuote = true;\n                quoteChar = char;\n            } else if (char === quoteChar) {\n                inQuote = false;\n            }\n        }\n\n        if (!inQuote) {\n            // 处理圆括号 (函数调用、数学运算等)\n            if (char === '(') parenCount++;\n            if (char === ')') parenCount--;\n\n            // 处理方括号 (数组)\n            if (char === '[') bracketCount++;\n            if (char === ']') bracketCount--;\n\n            // 处理花括号 (对象)\n            if (char === '{') braceCount++;\n            if (char === '}') braceCount--;\n        }\n        // 处理参数分隔符\n        // 现在只有当所有括号都匹配闭合时，逗号才被视为分隔符\n        if (\n            char === ',' &&\n            !inQuote &&\n            parenCount === 0 &&\n            bracketCount === 0 &&\n            braceCount === 0\n        ) {\n            params.push(currentParam.trim());\n            currentParam = '';\n            continue;\n        }\n\n        currentParam += char;\n    }\n\n    // 添加最后一个参数\n    if (currentParam.trim()) {\n        params.push(currentParam.trim());\n    }\n\n    return params;\n}\n\nexport async function getLastValidVariable(message_id: number): Promise<MvuData> {\n    return (structuredClone(\n        _(SillyTavern.chat)\n            .slice(0, message_id + 1)\n            .map(chat_message => _.get(chat_message, ['variables', chat_message.swipe_id ?? 0]))\n            .findLast(variables => _.has(variables, 'stat_data'))\n    ) ?? getVariables()) as MvuData;\n}\n\nfunction pathFix(path: string): string {\n    const segments = [];\n    let currentSegment = '';\n    let inQuotes = false;\n    let quoteChar = '';\n\n    for (let i = 0; i < path.length; i++) {\n        const char = path[i];\n\n        // Handle quotes\n        if ((char === '\"' || char === \"'\") && (i === 0 || path[i - 1] !== '\\\\')) {\n            if (!inQuotes) {\n                inQuotes = true;\n                quoteChar = char;\n            } else if (char === quoteChar) {\n                inQuotes = false;\n            } else {\n                currentSegment += char;\n            }\n        } else if (char === '.' && !inQuotes) {\n            segments.push(currentSegment);\n            currentSegment = '';\n        } else {\n            currentSegment += char;\n        }\n    }\n\n    if (currentSegment) {\n        segments.push(currentSegment);\n    }\n\n    return segments.join('.');\n}\n\n/**\n * MVU 风格的变量更新操作，同时会更新 display_data/delta_data\n * @param stat_data 当前的变量状态，来源应当是 mag_variable_updated 回调中提供的 stat_data。其他来源则不会修改 display_data 等。\n * @param path 要更改的变量路径\n * @param new_value 新值\n * @param reason 修改原因（可选，默认为空）\n * @param is_recursive 此次修改是否允许触发 mag_variable_updated 回调（默认不允许）\n */\nexport async function updateVariable(\n    stat_data: Record<string, any>,\n    path: string,\n    new_value: any,\n    reason: string = '',\n    is_recursive: boolean = false\n): Promise<boolean> {\n    const display_data = stat_data.$internal?.display_data;\n    const delta_data = stat_data.$internal?.delta_data;\n    if (_.has(stat_data, path)) {\n        const currentValue = _.get(stat_data, path);\n        if (Array.isArray(currentValue) && currentValue.length === 2) {\n            //VWD 处理\n            const oldValue = _.cloneDeep(currentValue[0]);\n            currentValue[0] = new_value;\n            _.set(stat_data, path, currentValue);\n            const reason_str = reason ? `(${reason})` : '';\n            const display_str = `${trimQuotesAndBackslashes(JSON.stringify(oldValue))}->${trimQuotesAndBackslashes(JSON.stringify(new_value))} ${reason_str}`;\n            if (display_data) _.set(display_data, path, display_str);\n            if (delta_data) _.set(delta_data, path, display_str);\n            console.info(\n                `Set '${path}' to '${trimQuotesAndBackslashes(JSON.stringify(new_value))}' ${reason_str}`\n            );\n            if (is_recursive)\n                await eventEmit(\n                    variable_events.SINGLE_VARIABLE_UPDATED,\n                    stat_data,\n                    path,\n                    oldValue,\n                    new_value\n                );\n            return true;\n        } else {\n            const oldValue = _.cloneDeep(currentValue);\n            _.set(stat_data, path, new_value);\n            const reason_str = reason ? `(${reason})` : '';\n            const stringNewValue = trimQuotesAndBackslashes(JSON.stringify(new_value));\n            const display_str = `${trimQuotesAndBackslashes(JSON.stringify(oldValue))}->${stringNewValue} ${reason_str}`;\n            if (display_data) _.set(display_data, path, display_str);\n            if (delta_data) _.set(delta_data, path, display_str);\n            console.info(`Set '${path}' to '${stringNewValue}' ${reason_str}`);\n            if (is_recursive)\n                await eventEmit(\n                    variable_events.SINGLE_VARIABLE_UPDATED,\n                    stat_data,\n                    path,\n                    oldValue,\n                    new_value\n                );\n            return true;\n        }\n    }\n    return false;\n}\n\ntype ErrorInfo = {\n    error_last: string;\n    error_command: Command;\n};\n\n// 重构 updateVariables 以处理更多命令\nexport async function updateVariables(\n    current_message_content: string,\n    variables: MvuData\n): Promise<boolean> {\n    const out_is_modifed = false;\n    // 深拷贝变量对象，生成状态快照，用于记录显示数据\n    const out_status: MvuData = _.cloneDeep(variables);\n    // 初始化增量状态对象，记录变化详情\n    const delta_status: Partial<MvuData> = { stat_data: {} };\n\n    // 重构新增：统一处理宏替换，确保命令中的宏（如 ${variable}）被替换，提升一致性\n    const processed_message_content = substitudeMacros(current_message_content);\n\n    // 使用重构后的 extractCommands 提取所有命令\n    const commands = extractCommands(processed_message_content);\n    // 触发变量更新开始事件，通知外部系统\n    variables.stat_data.$internal = {\n        display_data: out_status.stat_data,\n        delta_data: delta_status.stat_data || {},\n    };\n    //@ts-expect-error 这里会有一个variables类型的不一致，一个内部类型，一个外部类型。\n    await eventEmit(variable_events.VARIABLE_UPDATE_STARTED, variables);\n    let variable_modified = false;\n\n    let error_info: ErrorInfo | undefined;\n    let current_command: Command | undefined;\n    const outError = function (message: string) {\n        console.warn(message);\n        error_info = {\n            error_last: message,\n            error_command: current_command!,\n        };\n    };\n\n    const schema = variables.schema; // 获取 schema，可能为 undefined\n    const strict_template = schema?.strictTemplate ?? false;\n    const concat_template_array = schema?.concatTemplateArray ?? true;\n    const strict_set = schema?.strictSet ?? false;\n\n    //处理别名\n    for (const cmd of commands) {\n        if (cmd.type === 'remove') {\n            cmd.type = 'delete';\n        } else if (cmd.type === 'assign') {\n            cmd.type = 'insert';\n        } else if (cmd.type === 'unset') {\n            cmd.type = 'delete';\n        }\n    }\n\n    await eventEmit(variable_events.COMMAND_PARSED, variables, commands);\n\n    for (const command of commands) {\n        // 遍历所有命令，逐一处理\n        // 修正路径格式，去除首尾引号和反斜杠，确保路径有效\n        const path = pathFix(trimQuotesAndBackslashes(command.args[0]));\n        // 生成原因字符串，用于日志和显示\n        const reason_str = command.reason ? `(${command.reason})` : '';\n        let display_str = ''; // 初始化显示字符串，记录操作详情\n        current_command = command;\n\n        switch (\n            command.type // 根据命令类型执行不同操作\n        ) {\n            case 'set': {\n                // _.has 检查，确保路径存在\n                if (!_.has(variables.stat_data, path)) {\n                    outError(\n                        `Path '${path}' does not exist in stat_data, skipping set command ${reason_str}`\n                    );\n                    continue;\n                }\n\n                // 获取路径上的旧值，可能为 undefined（路径不存在）\n                let oldValue = _.get(variables.stat_data, path);\n                // 支持两种格式：_.set(path, newValue) 或 _.set(path, oldValue, newValue)\n                const newValueStr = command.args.length >= 3 ? command.args[2] : command.args[1];\n                // 解析新值，支持字符串、数字、布尔值、JSON 对象等\n                let newValue = parseCommandValue(newValueStr);\n\n                // 在写入前，将 Date 对象序列化为 ISO 字符串\n                if (newValue instanceof Date) {\n                    newValue = newValue.toISOString();\n                }\n                let isPathVWD = false;\n\n                if (\n                    !strict_set &&\n                    Array.isArray(oldValue) &&\n                    oldValue.length === 2 &&\n                    typeof oldValue[1] === 'string' &&\n                    !Array.isArray(oldValue[0])\n                ) {\n                    // 处理 ValueWithDescription<T> 类型，更新数组第一个元素\n                    // 仅当旧值为数字且新值不为 null 时，才强制转换为数字\n                    // 这允许将数字字段设置为 null (例如角色死亡后好感度变为 null)\n                    const oldValueCopy = _.cloneDeep(oldValue[0]);\n                    oldValue[0] =\n                        typeof oldValue[0] === 'number' && newValue !== null\n                            ? Number(newValue)\n                            : newValue;\n                    oldValue = oldValueCopy;\n                    isPathVWD = true;\n                } else if (typeof oldValue === 'number' && newValue !== null) {\n                    _.set(variables.stat_data, path, Number(newValue));\n                } else {\n                    // 其他情况直接设置新值，支持任意类型\n                    _.set(variables.stat_data, path, newValue);\n                }\n\n                // 获取最终设置的新值，用于日志和事件\n                let finalNewValue = _.get(variables.stat_data, path);\n\n                assertVWD(isPathVWD, finalNewValue);\n\n                if (isPathVWD) {\n                    finalNewValue = finalNewValue[0];\n                }\n\n                // 检查是否为 ValueWithDescription 类型，以优化显示\n                const isStrict = !strict_set;\n\n                if (\n                    isStrict &&\n                    isValueWithDescriptionStatData(oldValue) &&\n                    Array.isArray(finalNewValue)\n                ) {\n                    // 如果是 ValueWithDescription，只显示值的变化\n                    display_str = `${trimQuotesAndBackslashes(JSON.stringify(oldValue[0]))}->${trimQuotesAndBackslashes(JSON.stringify(finalNewValue[0]))} ${reason_str}`;\n                } else {\n                    // 否则，按常规显示\n                    display_str = `${trimQuotesAndBackslashes(JSON.stringify(oldValue))}->${trimQuotesAndBackslashes(JSON.stringify(finalNewValue))} ${reason_str}`;\n                }\n\n                variable_modified = true; // 标记变量已修改\n                // 记录操作日志，便于调试\n                console.info(`Set '${path}' to '${JSON.stringify(finalNewValue)}' ${reason_str}`);\n\n                // 触发单变量更新事件，通知外部系统\n                await eventEmit(\n                    variable_events.SINGLE_VARIABLE_UPDATED,\n                    variables.stat_data,\n                    path,\n                    oldValue,\n                    finalNewValue\n                );\n                break;\n            }\n\n            case 'insert':\n            case 'assign': {\n                // 检查目标路径是否指向一个集合（数组或对象）\n                // 如果路径已存在且其值为原始类型（字符串、数字等），则跳过此命令，以防止结构污染\n                const targetPath = path;\n                // 统一获取目标值和目标Schema，优雅地处理根路径\n                const existingValue =\n                    targetPath === ''\n                        ? variables.stat_data\n                        : _.get(variables.stat_data, targetPath);\n                const targetSchema = getSchemaForPath(schema, targetPath);\n\n                // 验证1：目标是否为原始类型？如果是，则无法插入。\n                if (\n                    existingValue !== null &&\n                    !Array.isArray(existingValue) &&\n                    !_.isObject(existingValue)\n                ) {\n                    outError(\n                        `Cannot assign into path '${targetPath}' because it holds a primitive value (${typeof existingValue}). Operation skipped. ${reason_str}`\n                    );\n                    continue;\n                }\n\n                // 验证2：Schema 规则\n                if (targetSchema) {\n                    if (targetSchema.type === 'object' && targetSchema.extensible === false) {\n                        if (command.args.length === 2) {\n                            // 合并\n                            outError(\n                                `SCHEMA VIOLATION: Cannot merge data into non-extensible object at path '${targetPath}'. ${reason_str}`\n                            );\n                            continue;\n                        }\n                        if (command.args.length >= 3) {\n                            // 插入键\n                            const newKey = String(parseCommandValue(command.args[1]));\n                            if (!_.has(targetSchema.properties, newKey)) {\n                                outError(\n                                    `SCHEMA VIOLATION: Cannot assign new key '${newKey}' into non-extensible object at path '${targetPath}'. ${reason_str}`\n                                );\n                                continue;\n                            }\n                        }\n                    } else if (\n                        targetSchema.type === 'array' &&\n                        (targetSchema.extensible === false || targetSchema.extensible === undefined)\n                    ) {\n                        outError(\n                            `SCHEMA VIOLATION: Cannot assign elements into non-extensible array at path '${targetPath}'. ${reason_str}`\n                        );\n                        continue;\n                    }\n                } else if (\n                    // 增加 targetPath !== '' 条件，防止对根路径进行父路径检查\n                    targetPath !== '' &&\n                    !_.get(variables.stat_data, _.toPath(targetPath).slice(0, -1).join('.'))\n                ) {\n                    // 验证3：如果要插入到新路径，确保其父路径存在且可扩展\n                    outError(\n                        `Cannot assign into non-existent path '${targetPath}' without an extensible parent. ${reason_str}`\n                    );\n                    continue;\n                }\n                // --- 所有验证通过，现在可以安全执行 ---\n\n                // 深拷贝旧值，防止直接修改影响后续比较\n                const oldValue = _.cloneDeep(_.get(variables.stat_data, path));\n                let successful = false; // 标记插入是否成功\n\n                if (command.args.length === 2) {\n                    // _.assign('path.to.array', value)\n                    // 解析插入值，支持复杂类型\n                    let valueToAssign = parseCommandValue(command.args[1]);\n\n                    // 在写入前，将 Date 对象（或数组中的Date）序列化\n                    if (valueToAssign instanceof Date) {\n                        valueToAssign = valueToAssign.toISOString();\n                    } else if (Array.isArray(valueToAssign)) {\n                        valueToAssign = valueToAssign.map(item =>\n                            item instanceof Date ? item.toISOString() : item\n                        );\n                    }\n\n                    // 获取目标集合，可能为数组或对象\n                    let collection =\n                        targetPath === '' ? variables.stat_data : _.get(variables.stat_data, path);\n\n                    // 如果目标不存在，初始化为空数组或对象\n                    if (!Array.isArray(collection) && !_.isObject(collection)) {\n                        collection = Array.isArray(valueToAssign) ? [] : {};\n                        _.set(variables.stat_data, path, collection);\n                    }\n\n                    if (Array.isArray(collection)) {\n                        // 目标是数组，追加元素\n                        // 检查是否有模板并应用\n                        const template =\n                            targetSchema && isArraySchema(targetSchema)\n                                ? targetSchema.template\n                                : undefined;\n                        valueToAssign = applyTemplate(\n                            valueToAssign,\n                            template,\n                            strict_template,\n                            concat_template_array\n                        );\n                        collection.push(valueToAssign);\n                        display_str = `ASSIGNED ${JSON.stringify(valueToAssign)} into array '${path}' ${reason_str}`;\n                        successful = true;\n                    } else if (_.isObject(collection)) {\n                        // 目标是对象，合并属性\n                        // 注意：对象合并时不应用模板，因为无法明确确定增加的元素\n                        // 模板只在明确添加单个新属性时应用（如使用三参数的 assign）\n                        if (_.isObject(valueToAssign) && !Array.isArray(valueToAssign)) {\n                            _.merge(collection, valueToAssign);\n                            display_str = `MERGED object ${JSON.stringify(valueToAssign)} into object '${path}' ${reason_str}`;\n                            successful = true;\n                        } else {\n                            // 不支持将数组或非对象合并到对象，记录错误\n                            outError(\n                                `Cannot merge ${Array.isArray(valueToAssign) ? 'array' : 'non-object'} into object at '${path}'`\n                            );\n                            continue;\n                        }\n                    }\n                } else if (command.args.length >= 3) {\n                    // _.assign('path', key/index, value)\n                    // 解析插入值和键/索引\n                    let valueToAssign = parseCommandValue(command.args[2]);\n                    const keyOrIndex = parseCommandValue(command.args[1]);\n\n                    // 在写入前，将 Date 对象（或数组中的Date）序列化\n                    if (valueToAssign instanceof Date) {\n                        valueToAssign = valueToAssign.toISOString();\n                    } else if (Array.isArray(valueToAssign)) {\n                        valueToAssign = valueToAssign.map(item =>\n                            item instanceof Date ? item.toISOString() : item\n                        );\n                    }\n\n                    let collection =\n                        targetPath === '' ? variables.stat_data : _.get(variables.stat_data, path);\n\n                    // 获取模板\n                    const template =\n                        targetSchema &&\n                        (isArraySchema(targetSchema) || isObjectSchema(targetSchema))\n                            ? targetSchema.template\n                            : undefined;\n\n                    if (Array.isArray(collection) && typeof keyOrIndex === 'number') {\n                        // 目标是数组且索引是数字，插入到指定位置\n                        valueToAssign = applyTemplate(\n                            valueToAssign,\n                            template,\n                            strict_template,\n                            concat_template_array\n                        );\n                        collection.splice(keyOrIndex, 0, valueToAssign);\n                        display_str = `ASSIGNED ${JSON.stringify(valueToAssign)} into '${path}' at index ${keyOrIndex} ${reason_str}`;\n                        successful = true;\n                    } else if (_.isObject(collection)) {\n                        // 目标是对象，设置指定键\n                        // _.set(collection, String(keyOrIndex), valueToAssign);\n                        // 对单个属性值应用模板\n                        valueToAssign = applyTemplate(\n                            valueToAssign,\n                            template,\n                            strict_template,\n                            concat_template_array\n                        );\n                        (collection as Record<string, unknown>)[String(keyOrIndex)] = valueToAssign;\n                        display_str = `ASSIGNED key '${keyOrIndex}' with value ${JSON.stringify(valueToAssign)} into object '${path}' ${reason_str}`;\n                        successful = true;\n                    } else {\n                        // 目标不存在，创建新对象并插入\n                        collection = {};\n                        _.set(variables.stat_data, path, collection);\n                        /*\n                        _.set(\n                            collection as Record<string, unknown>,\n                            String(keyOrIndex),\n                            valueToAssign\n                        );\n                        */\n                        // 对新属性值应用模板\n                        valueToAssign = applyTemplate(\n                            valueToAssign,\n                            template,\n                            strict_template,\n                            concat_template_array\n                        );\n                        (collection as Record<string, unknown>)[String(keyOrIndex)] = valueToAssign;\n                        display_str = `CREATED object at '${path}' and ASSIGNED key '${keyOrIndex}' ${reason_str}`;\n                        successful = true;\n                    }\n                }\n\n                if (successful) {\n                    // 插入成功，获取新值并触发事件\n                    const newValue = _.get(variables.stat_data, path);\n                    variable_modified = true;\n                    console.info(display_str);\n                    await eventEmit(\n                        variable_events.SINGLE_VARIABLE_UPDATED,\n                        variables.stat_data,\n                        path,\n                        oldValue,\n                        newValue\n                    );\n                    try {\n                        //对新应用的 template 立刻处理模板。\n                        const currentDataClone = structuredClone(newValue);\n\n                        const newSchema = generateSchema(currentDataClone, targetSchema!);\n                        _.merge(targetSchema, newSchema);\n                        cleanUpMetadata(newValue);\n                    } catch (error) {\n                        // 应用失败，记录错误并继续处理下一命令\n                        if (error instanceof Error) {\n                            outError(\n                                `Failed to resolve template meta at '${path}', '${error.message}'`\n                            );\n                        } else {\n                            outError(`Failed to resolve template meta at '${path}', '${error}'`);\n                        }\n                    }\n                } else {\n                    // 插入失败，记录错误并继续处理下一命令\n                    outError(`Invalid arguments for _.assign on path '${path}'`);\n                    continue;\n                }\n                break;\n            }\n\n            case 'unset':\n            case 'delete':\n            case 'remove': {\n                // 验证路径存在，防止无效删除\n                if (!_.has(variables.stat_data, path)) {\n                    outError(`undefined Path: ${path} in _.remove command`);\n                    continue;\n                }\n\n                // --- 模式校验开始 ---\n                let containerPath = path;\n                let keyOrIndexToRemove: string | number | undefined;\n\n                if (command.args.length > 1) {\n                    // _.remove('path', key_or_index)\n                    keyOrIndexToRemove = parseCommandValue(command.args[1]);\n                    // 如果 key 是字符串，需要去除可能存在的引号\n                    if (typeof keyOrIndexToRemove === 'string') {\n                        keyOrIndexToRemove = trimQuotesAndBackslashes(keyOrIndexToRemove);\n                    }\n                } else {\n                    // _.remove('path.to.key[index]')\n                    const pathParts = _.toPath(path);\n                    const lastPart = pathParts.pop();\n                    if (lastPart) {\n                        keyOrIndexToRemove = /^\\d+$/.test(lastPart) ? Number(lastPart) : lastPart;\n                        containerPath = pathParts.join('.');\n                    }\n                }\n\n                if (keyOrIndexToRemove === undefined) {\n                    outError(\n                        `Could not determine target for deletion for command on path '${path}' ${reason_str}`\n                    );\n                    continue;\n                }\n                // 只有当容器路径不是根路径（即不为空）时，才检查其是否存在\n                if (containerPath !== '' && !_.has(variables.stat_data, containerPath)) {\n                    outError(\n                        `Cannot remove from non-existent path '${containerPath}'. ${reason_str}`\n                    );\n                    continue;\n                }\n\n                const containerSchema = getSchemaForPath(schema, containerPath);\n\n                if (containerSchema) {\n                    if (containerSchema.type === 'array') {\n                        if (containerSchema.extensible !== true) {\n                            outError(\n                                `SCHEMA VIOLATION: Cannot remove element from non-extensible array at path '${containerPath}'. ${reason_str}`\n                            );\n                            continue;\n                        }\n                    } else if (containerSchema.type === 'object') {\n                        const keyString = String(keyOrIndexToRemove);\n                        if (\n                            _.has(containerSchema.properties, keyString) &&\n                            containerSchema.properties[keyString].required === true\n                        ) {\n                            outError(\n                                `SCHEMA VIOLATION: Cannot remove required key '${keyString}' from path '${containerPath}'. ${reason_str}`\n                            );\n                            continue;\n                        }\n                    }\n                }\n\n                // --- 所有验证通过，现在可以安全执行 ---\n\n                // 解析删除目标，可能是值或索引\n                const targetToRemove =\n                    command.args.length > 1 ? parseCommandValue(command.args[1]) : undefined;\n                let itemRemoved = false; // 标记是否删除成功\n\n                if (targetToRemove === undefined) {\n                    // _.remove('path.to.key')\n                    // 删除整个路径\n                    const oldValue = _.get(variables.stat_data, path);\n                    _.unset(variables.stat_data, path);\n                    display_str = `REMOVED path '${path}' ${reason_str}`;\n                    itemRemoved = true;\n                    await eventEmit(\n                        variable_events.SINGLE_VARIABLE_UPDATED,\n                        variables.stat_data,\n                        path,\n                        oldValue,\n                        undefined\n                    );\n                } else {\n                    // _.remove('path.to.array', value_or_index)\n                    const collection = _.get(variables.stat_data, path);\n\n                    // 当从一个集合中删除元素时，必须确保目标路径确实是一个集合\n                    // 如果目标是原始值（例如字符串），则无法执行删除操作\n                    if (!Array.isArray(collection) && !_.isObject(collection)) {\n                        outError(\n                            `Cannot remove from path '${path}' because it is not an array or object. Skipping command. ${reason_str}`\n                        );\n                        continue;\n                    }\n\n                    if (Array.isArray(collection)) {\n                        // 目标是数组，删除指定元素\n                        const originalArray = _.cloneDeep(collection);\n                        let indexToRemove = -1;\n                        if (typeof targetToRemove === 'number') {\n                            indexToRemove = targetToRemove;\n                        } else {\n                            indexToRemove = collection.findIndex(item =>\n                                _.isEqual(item, targetToRemove)\n                            );\n                        }\n\n                        if (indexToRemove >= 0 && indexToRemove < collection.length) {\n                            collection.splice(indexToRemove, 1);\n                            itemRemoved = true;\n                            display_str = `REMOVED item from '${path}' ${reason_str}`;\n                            await eventEmit(\n                                variable_events.SINGLE_VARIABLE_UPDATED,\n                                variables.stat_data,\n                                path,\n                                originalArray,\n                                collection\n                            );\n                        }\n                    } else if (_.isObject(collection)) {\n                        if (typeof targetToRemove === 'number') {\n                            // 目标是对象，按索引删除键\n                            const keys = Object.keys(collection);\n                            const index = targetToRemove;\n                            if (index >= 0 && index < keys.length) {\n                                const keyToRemove = keys[index];\n                                _.unset(collection, keyToRemove);\n                                itemRemoved = true;\n                                display_str = `REMOVED ${index + 1}th entry ('${keyToRemove}') from object '${path}' ${reason_str}`;\n                            }\n                        } else {\n                            // 目标是对象，按键名删除\n                            const keyToRemove = String(targetToRemove);\n                            if (_.has(collection, keyToRemove)) {\n                                // _.unset(collection, keyToRemove);\n                                delete (collection as Record<string, unknown>)[keyToRemove];\n                                itemRemoved = true;\n                                display_str = `REMOVED key '${keyToRemove}' from object '${path}' ${reason_str}`;\n                            }\n                        }\n                    }\n                }\n\n                if (itemRemoved) {\n                    // 删除成功，更新状态并记录日志\n                    variable_modified = true;\n                    console.info(display_str);\n                } else {\n                    // 删除失败，记录警告并继续\n                    outError(`Failed to execute remove on '${path}'`);\n                    continue;\n                }\n                break;\n            }\n\n            case 'add': {\n                // 验证路径存在\n                if (!_.has(variables.stat_data, path)) {\n                    outError(\n                        `Path '${path}' does not exist in stat_data, skipping add command ${reason_str}`\n                    );\n                    continue;\n                }\n                // 获取当前值\n                const initialValue = _.cloneDeep(_.get(variables.stat_data, path));\n                const oldValue = _.get(variables.stat_data, path);\n                let valueToAdd = oldValue;\n                const isVWD =\n                    isValueWithDescriptionStatData(oldValue) && typeof oldValue[0] !== 'object';\n\n                if (isVWD) {\n                    assertVWD(isVWD, oldValue);\n                    valueToAdd = oldValue[0]; // 对 ValueWithDescription 类型，操作其第一个元素\n                }\n                // console.warn(valueToAdd);\n\n                // 尝试将当前值解析为 Date 对象，无论其原始类型是 Date 还是字符串\n                let potentialDate: Date | null = null;\n                if (valueToAdd instanceof Date) {\n                    potentialDate = valueToAdd;\n                } else if (typeof valueToAdd === 'string') {\n                    const parsedDate = new Date(valueToAdd);\n                    // 确保它是一个有效的日期，并且不是一个可以被 `new Date` 解析的纯数字字符串\n                    if (!isNaN(parsedDate.getTime()) && isNaN(Number(valueToAdd))) {\n                        potentialDate = parsedDate;\n                    }\n                }\n\n                if (command.args.length === 2) {\n                    // 双参数：调整数值或日期\n                    const delta = parseCommandValue(command.args[1]);\n\n                    // 处理 Date 类型\n                    if (potentialDate) {\n                        if (typeof delta !== 'number') {\n                            outError(\n                                `Delta '${command.args[1]}' for Date operation is not a number, skipping add command ${reason_str}`\n                            );\n                            continue;\n                        }\n                        // delta 是毫秒数，更新时间\n                        const newDate = new Date(potentialDate.getTime() + delta);\n                        // 总是将更新后的 Date 对象转换为 ISO 字符串再存回去\n                        const finalValueToSet = newDate.toISOString();\n\n                        if (isVWD) {\n                            assertVWD(isVWD, oldValue);\n                            oldValue[0] = finalValueToSet;\n                            _.set(variables.stat_data, path, oldValue);\n                        } else {\n                            _.set(variables.stat_data, path, finalValueToSet);\n                        }\n\n                        const finalNewValue = _.get(variables.stat_data, path);\n                        if (isVWD) {\n                            display_str = `${JSON.stringify((initialValue as any[])[0])}->${JSON.stringify((finalNewValue as any[])[0])} ${reason_str}`;\n                        } else {\n                            display_str = `${JSON.stringify(initialValue)}->${JSON.stringify(finalNewValue)} ${reason_str}`;\n                        }\n                        variable_modified = true;\n                        console.info(\n                            `ADDED date '${path}' from '${potentialDate.toISOString()}' to '${newDate.toISOString()}' by delta '${delta}'ms ${reason_str}`\n                        );\n                        await eventEmit(\n                            variable_events.SINGLE_VARIABLE_UPDATED,\n                            variables.stat_data,\n                            path,\n                            initialValue,\n                            finalNewValue\n                        );\n                    } else if (typeof valueToAdd === 'number') {\n                        // 原有的处理 number 类型的逻辑\n                        if (typeof delta !== 'number') {\n                            outError(\n                                `Delta '${command.args[1]}' is not a number, skipping add command ${reason_str}`\n                            );\n                            continue;\n                        }\n                        let newValue = valueToAdd + delta;\n                        newValue = parseFloat(newValue.toPrecision(12)); // 避免浮点数精度误差\n                        if (isVWD) {\n                            oldValue[0] = newValue; // Update the first element\n                            _.set(variables.stat_data, path, oldValue);\n                        } else {\n                            _.set(variables.stat_data, path, newValue);\n                        }\n                        const finalNewValue = _.get(variables.stat_data, path);\n                        if (isVWD) {\n                            display_str = `${JSON.stringify((initialValue as any[])[0])}->${JSON.stringify((finalNewValue as any[])[0])} ${reason_str}`;\n                        } else {\n                            display_str = `${JSON.stringify(initialValue)}->${JSON.stringify(finalNewValue)} ${reason_str}`;\n                        }\n                        variable_modified = true;\n                        console.info(\n                            `ADDED number '${path}' from '${valueToAdd}' to '${newValue}' by delta '${delta}' ${reason_str}`\n                        );\n                        await eventEmit(\n                            variable_events.SINGLE_VARIABLE_UPDATED,\n                            variables.stat_data,\n                            path,\n                            initialValue,\n                            finalNewValue\n                        );\n                    } else {\n                        // 如果值不是可识别的类型（日期、数字），则跳过\n                        outError(\n                            `Path '${path}' value is not a date or number; skipping add command ${reason_str}`\n                        );\n                        continue;\n                    }\n                } else {\n                    outError(\n                        `Invalid number of arguments for _.add on path '${path}' ${reason_str}`\n                    );\n                    continue;\n                }\n                break;\n            }\n        }\n\n        if (display_str) {\n            // 更新状态和增量数据，记录操作详情\n            _.set(out_status.stat_data, path, display_str);\n            _.set(delta_status.stat_data!, path, display_str);\n        }\n    }\n    // 更新变量的显示和增量数据\n    variables.display_data = out_status.stat_data;\n    variables.delta_data = delta_status.stat_data!;\n    // 触发变量更新结束事件\n    //@ts-expect-error 这里会有一个variables类型的不一致，一个内部类型，一个外部类型。\n    await eventEmit(variable_events.VARIABLE_UPDATE_ENDED, variables);\n    //在结束事件中也可能设置变量\n    delete variables.stat_data.$internal;\n\n    // 在所有命令执行完毕后，如果数据有任何变动，则执行一次 Schema 调和\n    if (variable_modified) {\n        reconcileAndApplySchema(variables);\n    }\n    if (error_info && useSettingsStore().settings.通知.变量更新出错) {\n        const base_command: string = error_info.error_command.full_match;\n        if (typeof toastr !== 'undefined')\n            toastr.warning(\n                `最近错误: ${error_info.error_last}`,\n                `[MVU]发生变量更新错误，可能需要重Roll: ${base_command}`,\n                { timeOut: 6000 }\n            );\n    }\n\n    // 返回是否修改了变量\n    return variable_modified || out_is_modifed;\n}\n\nexport async function handleVariablesInMessage(message_id: number) {\n    const chat_message = getChatMessages(message_id).at(-1);\n    if (!chat_message) {\n        return;\n    }\n\n    let message_content = chat_message.message;\n\n    if (message_content.length < 5)\n        //MESSAGE_RECEIVED会递交一个 \"...\" 的消息\n        return;\n    const request_message_id = message_id === 0 ? 0 : message_id - 1;\n    const variables = await getLastValidVariable(request_message_id);\n    if (!_.has(variables, 'stat_data')) {\n        console.error(`cannot found stat_data for ${request_message_id}`);\n        return;\n    }\n\n    const has_variable_modified = await updateVariables(message_content, variables);\n    const updater = (data: Record<string, any>) => {\n        data.stat_data = variables.stat_data;\n        data.display_data = variables.display_data;\n        data.delta_data = variables.delta_data;\n        data.initialized_lorebooks = variables.initialized_lorebooks;\n        if (variables.schema !== undefined) {\n            data.schema = variables.schema;\n        } else {\n            delete data.schema;\n        }\n        return data;\n    };\n    if (has_variable_modified) {\n        await updateVariablesWith(updater, { type: 'chat' });\n    }\n    await updateVariablesWith(updater, { type: 'message', message_id: message_id });\n\n    if (chat_message.role !== 'user') {\n        if (!message_content.includes('<StatusPlaceHolderImpl/>')) {\n            message_content += '\\n\\n<StatusPlaceHolderImpl/>';\n        }\n        await setChatMessages(\n            [\n                {\n                    message_id: message_id,\n                    message: message_content,\n                },\n            ],\n            {\n                refresh: 'affected',\n            }\n        );\n    }\n}\n\nexport async function handleVariablesInCallback(\n    message_content: string,\n    in_out_variable_info: VariableData\n) {\n    if (in_out_variable_info.old_variables === undefined) {\n        return;\n    }\n    in_out_variable_info.new_variables = _.cloneDeep(in_out_variable_info.old_variables);\n    const variables = in_out_variable_info.new_variables;\n\n    const modified = await updateVariables(message_content, variables);\n    //如果没有修改，则不产生 newVariable\n    if (!modified) delete in_out_variable_info.new_variables;\n    return;\n}\n","/**\n * 递归更新描述字段\n *\n * 示例数据结构：\n * initData: {\n *   \"属性\": {\n *     \"value\": 100,\n *     \"description\": \"这是初始描述\"  // 条件 4(a)\n *   },\n *   \"生命值\": [100, \"初始生命值\"],  // 条件 4(b): ValueWithDescription<number>\n *   \"技能\": [{\n *     \"name\": \"攻击\",\n *     \"damage\": [50, \"基础伤害\"],  // 嵌套的 ValueWithDescription\n *     \"description\": \"普通攻击\"\n *   }],\n *   \"装备\": {\n *     \"武器\": [\"剑\", \"初始武器\"],  // ValueWithDescription<string>\n *     \"属性加成\": {\n *       \"攻击力\": [10, \"武器攻击力加成\"]\n *     }\n *   }\n * }\n */\nexport function updateDescriptions(\n    _init_path: string,\n    init_data: any,\n    msg_data: any,\n    target_data: any\n) {\n    _.forEach(init_data, (value, key) => {\n        const current_path = key; //init_path ? `${init_path}.${key}` : key;\n\n        if (_.isArray(value)) {\n            // 检查是否为 ValueWithDescription<T> 类型 (长度为2，第二个元素是字符串)\n            if (value.length === 2 && _.isString(value[1])) {\n                // 条件 4(b): 满足 ValueWithDescription<T> 定义\n                if (_.isArray(_.get(msg_data, current_path))) {\n                    const msgValue = _.get(msg_data, current_path);\n                    if (msgValue.length === 2) {\n                        // 更新描述(第二个元素)\n                        _.set(target_data, `${current_path}[1]`, value[1]);\n\n                        // 如果第一个元素是对象或数组，需要递归处理\n                        if (_.isObject(value[0]) && !_.isArray(value[0])) {\n                            // 处理对象\n                            const targetObj = _.get(target_data, `${key}[0]`);\n\n                            // 如果对象包含description属性，需要特殊处理\n                            if (\n                                _.has(value[0], 'description') &&\n                                _.isString(value[0].description)\n                            ) {\n                                if (_.has(msgValue[0], 'description')) {\n                                    _.set(\n                                        target_data,\n                                        `${current_path}[0].description`,\n                                        value[0].description\n                                    );\n                                }\n                            }\n\n                            // 递归处理对象的其他属性\n                            updateDescriptions(\n                                `${current_path}[0]`,\n                                value[0],\n                                msgValue[0],\n                                targetObj\n                            );\n                        } else if (_.isArray(value[0])) {\n                            // 处理数组\n                            updateDescriptions(\n                                `${current_path}[0]`,\n                                value[0],\n                                msgValue[0],\n                                target_data[0]\n                            );\n                        }\n                    }\n                }\n            } else if (_.isArray(_.get(msg_data, current_path))) {\n                // 普通数组，递归处理每个元素\n                const msg_array = _.get(msg_data, current_path);\n                value.forEach((item, index) => {\n                    if (index < msg_array.length) {\n                        if (_.isObject(item)) {\n                            const current_target = _.get(target_data, `${current_path}[${index}]`);\n                            // 如果对象包含description属性，需要特殊处理\n                            if (_.has(item, 'description') && _.isString(item.description)) {\n                                if (_.has(msg_array[index], 'description')) {\n                                    _.set(current_target, `description`, item.description);\n                                }\n                            }\n\n                            updateDescriptions(\n                                `${current_path}[${index}]`,\n                                value[index],\n                                msg_array[index],\n                                current_target\n                            );\n                        }\n                    }\n                });\n            }\n        } else if (_.isObject(value)) {\n            // 处理对象\n            if (_.has(value, 'description') && _.isString(value.description)) {\n                // 条件 4(a): 对象包含 description 字段且为字符串\n                //msg_data 等已经在递归时跟着进入了更深的层次，不需要 currentPath前缀\n                const description_path = `${key}.description`;\n                if (_.has(msg_data, description_path)) {\n                    _.set(target_data, description_path, value.description);\n                }\n            }\n\n            // 继续递归处理对象的其他属性\n            if (_.has(msg_data, key) && _.isObject(msg_data[key])) {\n                updateDescriptions(current_path, value, msg_data[key], target_data[key]);\n            }\n        }\n    });\n}\n","// 整体游戏数据类型\nimport { getLastValidVariable, updateVariables } from '@/function';\nimport { cleanUpMetadata, EXTENSIBLE_MARKER, generateSchema } from '@/schema';\nimport { isObjectSchema, MvuData, RootAdditionalProps, SchemaNode } from '@/variable_def';\nimport JSON5 from 'json5';\nimport TOML from 'toml';\n\ntype LorebookEntry = {\n    content: string;\n    comment?: string;\n};\n\nexport async function initCheck() {\n    let variables: MvuData & Record<string, any>;\n    //这个函数需要处理 dryRun,因为0层。\n\n    try {\n        if (SillyTavern.chat.length === 0) {\n            console.error('不存在任何一条消息，退出');\n            toastr.error('需要有开场白才能初始化变量', '[MVU]变量初始化失败');\n            return;\n        }\n        variables = (await getLastValidVariable(getLastMessageId())) ?? createEmptyGameData();\n    } catch (e) {\n        console.error('不存在任何一条消息，退出');\n        return;\n    }\n\n    // 确保变量结构完整\n    if (variables === undefined) {\n        variables = createEmptyGameData();\n    }\n    if (!_.has(variables, 'initialized_lorebooks')) {\n        variables.initialized_lorebooks = {};\n    }\n    if (Array.isArray(variables.initialized_lorebooks)) {\n        console.warn(\n            'Old \"initialized_lorebooks\" array format detected. Migrating to the new object format.'\n        );\n        const oldArray = variables.initialized_lorebooks as string[];\n        const newObject: Record<string, any[]> = {};\n        for (const lorebookName of oldArray) {\n            newObject[lorebookName] = []; // 按照新格式，值为一个空数组\n        }\n        variables.initialized_lorebooks = newObject;\n    }\n    if (!variables.stat_data) {\n        variables.stat_data = {};\n    }\n    if (!variables.schema) {\n        variables.schema = { extensible: false, properties: {}, type: 'object' };\n    }\n\n    // 加载 InitVar 数据\n    const is_updated = await loadInitVarData(variables);\n\n    // --- 一次性清理所有魔法字符串 ---\n    if (is_updated) {\n        // 递归遍历整个 stat_data，移除所有魔法字符串\n        const cleanData = (data: any) => {\n            if (Array.isArray(data)) {\n                // 使用 filter 创建一个不含标记的新数组\n                const cleanedArray = data.filter(item => item !== EXTENSIBLE_MARKER);\n                // 递归清理数组内的对象或数组\n                cleanedArray.forEach(cleanData);\n                return cleanedArray;\n            }\n            if (_.isObject(data)) {\n                const newObj: Record<string, any> = {};\n                const typedData = data as Record<string, any>; // 类型断言\n                for (const key in data) {\n                    // 递归清理子节点，并将结果赋给新对象\n                    newObj[key] = cleanData(typedData[key]);\n                }\n                return newObj;\n            }\n            return data;\n        };\n        // 在生成 Schema 之前，先清理一遍 stat_data\n        // 这里需要先生成 Schema，再清理数据\n        // 所以还是得用克隆\n    }\n\n    // 在所有 lorebook 初始化完成后，生成最终的模式\n    if (is_updated || !variables.schema || _.isEmpty(variables.schema)) {\n        // 1. 克隆数据用于 Schema 生成\n        const dataForSchema = structuredClone(variables.stat_data);\n        // 2. generateSchema 会读取并移除克隆体中的标记，生成正确的 schema\n        // 对于增量场景，会以之前的 schema 为基础生成。\n        const generated_schema: SchemaNode & RootAdditionalProps = generateSchema(\n            dataForSchema,\n            variables.schema\n        );\n\n        // 使用类型守卫确保生成的 schema 是 ObjectSchemaNode\n        if (isObjectSchema(generated_schema)) {\n            if (_.has(variables.stat_data, '$meta.strictTemplate'))\n                generated_schema.strictTemplate = variables.stat_data['$meta']\n                    ?.strictTemplate as boolean;\n            if (_.has(variables.stat_data, '$meta.concatTemplateArray'))\n                generated_schema.concatTemplateArray = variables.stat_data['$meta']\n                    ?.concatTemplateArray as boolean;\n            if (_.has(variables.stat_data, '$meta.strictSet'))\n                generated_schema.strictSet = variables.stat_data['$meta']?.strictSet as boolean;\n            variables.schema = generated_schema;\n        } else {\n            console.error(\n                'Generated schema is not an object schema, which is unexpected for stat_data root'\n            );\n        }\n\n        // 3. 现在，清理真实的 stat_data，让它在后续操作中保持干净\n        cleanUpMetadata(variables.stat_data);\n    }\n\n    if (!is_updated) {\n        return;\n    }\n\n    console.info(`Init chat variables.`);\n    await updateVariablesWith(data => _.assign(data, variables));\n\n    if (getLastMessageId() == 0) {\n        const last_msg = getChatMessages(0, { include_swipes: true })[0];\n        // 更新所有 swipes\n        await setChatMessages([\n            {\n                // last_msg 不一定存在 message_id\n                message_id: 0,\n                swipes_data: await Promise.all(\n                    last_msg.swipes!.map(async swipe => {\n                        const current_data = structuredClone(variables);\n                        // 此处调用的是新版 updateVariables，它将支持更多命令\n                        // 不再需要手动调用 substitudeMacros，updateVariables 会处理\n                        await updateVariables(swipe, current_data);\n                        console.log(`变量初始化完成`);\n                        return current_data;\n                    })\n                ),\n            },\n        ]);\n    } else {\n        // 非开局直接更新到最后一条即可，也并不需要重新结算当前的变量\n        // @ts-expect-error 该函数可用\n        await setChatMessage({ data: variables }, getLastMessageId());\n    }\n    try {\n        // 输出构建信息\n        toastr.info(\n            `有新的世界书初始化变量被加载，当前使用世界书:<br>${Object.entries(\n                variables.initialized_lorebooks ?? {}\n            )\n                .map(([key, value]) => `- ${key}: ${JSON.stringify(value)}`)\n                .join('<br>')}}`,\n            '[MVU]变量初始化成功',\n            {\n                escapeHtml: false,\n            }\n        );\n    } catch (_e) {\n        /* empty */\n    }\n\n    // 更新 lorebook 设置\n    await updateLorebookSettings();\n}\n\n/**\n * 获取所有启用的 lorebook 列表\n */\nexport async function getEnabledLorebookList(): Promise<string[]> {\n    const lorebook_settings = await getLorebookSettings();\n    const enabled_lorebook_list = [...lorebook_settings.selected_global_lorebooks];\n    const char_lorebook = await getCurrentCharPrimaryLorebook();\n    if (char_lorebook !== null) {\n        enabled_lorebook_list.push(char_lorebook);\n    }\n    return enabled_lorebook_list;\n}\n\n/**\n * 从 lorebook 中加载所有 InitVar 数据并合并到提供的 GameData 中\n */\nexport async function loadInitVarData(\n    mvu_data: MvuData,\n    lorebook_list?: string[]\n): Promise<boolean> {\n    const enabled_lorebook_list = lorebook_list || (await getEnabledLorebookList());\n    let is_updated = false;\n\n    // 确保 initialized_lorebooks 是对象格式\n    if (!mvu_data.initialized_lorebooks || Array.isArray(mvu_data.initialized_lorebooks)) {\n        mvu_data.initialized_lorebooks = {};\n    }\n\n    for (const current_lorebook of enabled_lorebook_list) {\n        // 适配 beta 分支的对象结构\n        if (_.has(mvu_data.initialized_lorebooks, current_lorebook)) continue;\n        mvu_data.initialized_lorebooks[current_lorebook] = [];\n        const init_entries = (await getLorebookEntries(current_lorebook)) as LorebookEntry[];\n\n        for (const entry of init_entries) {\n            if (entry.comment?.toLowerCase().includes('[initvar]')) {\n                const content = substitudeMacros(entry.content);\n                let parsedData: any = null;\n                let parseError: Error | null = null;\n\n                // Try YAML first (which also handles JSON)\n                try {\n                    parsedData = YAML.parseDocument(content, { merge: true }).toJS();\n                } catch (e) {\n                    // Try JSON5\n                    try {\n                        // eslint-disable-next-line import-x/no-named-as-default-member\n                        parsedData = JSON5.parse(content);\n                    } catch (e2) {\n                        // Try TOML\n                        try {\n                            parsedData = TOML.parse(content);\n                        } catch (e3) {\n                            parseError = new Error(\n                                `initvar 不是有效的 YAML/JSON/JSON5/TOML 格式: ${e3}`\n                            );\n                        }\n                    }\n                }\n\n                if (parseError) {\n                    console.error(`解析世界书条目'${entry.comment}'失败: ${parseError}`);\n                    toastr.error(parseError.message, `[MVU] 解析世界书条目'${entry.comment}'失败`, {\n                        timeOut: 5000,\n                    });\n                    throw parseError;\n                }\n\n                if (parsedData) {\n                    mvu_data.stat_data = _.merge(mvu_data.stat_data, parsedData);\n                }\n            }\n        }\n        is_updated = true;\n    }\n\n    return is_updated;\n}\n\n/**\n * 创建一个新的空 GameData 对象\n */\nexport function createEmptyGameData(): MvuData {\n    return {\n        display_data: {},\n        initialized_lorebooks: {}, // 适配 beta 分支的对象结构\n        stat_data: {},\n        delta_data: {},\n        schema: {\n            type: 'object',\n            properties: {},\n        }, // beta 分支新增的 schema 字段\n    };\n}\n\n/**\n * 获取最后一条消息的变量数据\n */\nexport async function getLastMessageVariables(): Promise<{\n    message: ChatMessageSwiped;\n    variables: MvuData | undefined;\n}> {\n    let last_chat_msg: ChatMessageSwiped[] = [];\n    try {\n        last_chat_msg = (await getChatMessages(-2, {\n            role: 'assistant',\n            include_swipes: true,\n        })) as ChatMessageSwiped[];\n    } catch (e) {\n        // 在第一行时，必定发生异常。\n    }\n\n    if (!last_chat_msg || last_chat_msg.length <= 0) {\n        const first_msg = await getChatMessages(0, {\n            include_swipes: true,\n        });\n        if (first_msg && first_msg.length > 0) {\n            last_chat_msg = first_msg;\n        } else {\n            throw new Error('不存在任何一条消息');\n        }\n    }\n\n    const last_msg = last_chat_msg[0];\n    const variables = last_msg.swipes_data[last_msg.swipe_id] as MvuData & Record<string, any>;\n\n    return { message: last_msg, variables };\n}\n\n/**\n * 更新 lorebook 设置为推荐配置\n */\nexport async function updateLorebookSettings(): Promise<void> {\n    /*Ref:https://github.com/lolo-desu/lolocard/blob/master/src/%E6%97%A5%E8%AE%B0%E7%BB%9C%E7%BB%9C/%E8%84%9A%E6%9C%AC/%E8%B0%83%E6%95%B4%E4%B8%96%E7%95%8C%E4%B9%A6%E5%85%A8%E5%B1%80%E8%AE%BE%E7%BD%AE.ts\n     */\n    const dst_setting: Partial<LorebookSettings> = {\n        scan_depth: 2,\n        context_percentage: 100,\n        budget_cap: 0,\n        min_activations: 0,\n        max_depth: 0,\n        max_recursion_steps: 0,\n\n        insertion_strategy: 'character_first',\n\n        include_names: false,\n        recursive: true,\n        case_sensitive: false,\n        match_whole_words: false,\n        use_group_scoring: false,\n        overflow_alert: false,\n    };\n    const settings = getLorebookSettings();\n    if (!_.isEqual(_.merge({}, settings, dst_setting), settings)) {\n        setLorebookSettings(dst_setting);\n    }\n}\n\n//window.initCheck = initCheck;\n","import { getLastValidVariable, handleVariablesInMessage } from '@/function';\nimport { cleanUpMetadata, reconcileAndApplySchema } from '@/schema';\nimport { updateDescriptions } from '@/update_descriptions';\nimport { MvuData } from '@/variable_def';\nimport { createEmptyGameData, loadInitVarData } from '@/variable_init';\n\ninterface Button {\n    name: string;\n    function: (() => void) | (() => Promise<void>);\n}\n\nexport const buttons: Button[] = [\n    {\n        name: '重新处理变量',\n        function: async () => {\n            const last_msg = getLastMessageId();\n            if (last_msg < 1) return;\n            if (SillyTavern.chat.length === 0) return;\n            await updateVariablesWith(\n                variables => {\n                    _.unset(variables, `stat_data`);\n                    _.unset(variables, `delta_data`);\n                    _.unset(variables, `display_data`);\n                    _.unset(variables, `schema`);\n                    return variables;\n                },\n                { type: 'message', message_id: last_msg }\n            );\n            //重新处理变量\n            await handleVariablesInMessage(getLastMessageId());\n        },\n    },\n    {\n        name: '重新读取初始变量',\n        function: async () => {\n            // 1. 创建一个新的空 GameData 并加载 InitVar 数据\n            const latest_init_data = createEmptyGameData();\n\n            try {\n                const hasInitData = await loadInitVarData(latest_init_data);\n                if (!hasInitData) {\n                    console.error('没有找到 InitVar 数据');\n                    toastr.error('没有找到 InitVar 数据', '[MVU]', { timeOut: 3000 });\n                    return;\n                }\n            } catch (e) {\n                console.error('加载 InitVar 数据失败:', e);\n                return;\n            }\n            await reconcileAndApplySchema(latest_init_data);\n\n            cleanUpMetadata(latest_init_data.stat_data);\n\n            // 2. 从最新楼层获取最新变量\n            const message_id = getLastMessageId();\n            if (message_id < 0) {\n                console.error('没有找到消息');\n                toastr.error('没有找到消息', '[MVU]', { timeOut: 3000 });\n                return;\n            }\n\n            const latest_msg_data = await getLastValidVariable(message_id);\n\n            if (!_.has(latest_msg_data, 'stat_data')) {\n                console.error('最新消息中没有找到 stat_data');\n                toastr.error('最新消息中没有 stat_data', '[MVU]', { timeOut: 3000 });\n                return;\n            }\n\n            // 3. 产生新变量，以 latest_init_data 为基础，合并入 latest_msg_data 的内容\n            //此处 latest_init_data 内不存在复杂类型，因此可以采用 structuredClone\n            const merged_data: Record<string, any> = { stat_data: undefined, schema: undefined };\n            merged_data.stat_data = _.merge(\n                {},\n                latest_init_data.stat_data,\n                latest_msg_data.stat_data\n            );\n            merged_data.schema = _.merge({}, latest_msg_data.schema, latest_init_data.schema);\n            merged_data.initialized_lorebooks = _.merge(\n                {},\n                latest_init_data.initialized_lorebooks,\n                latest_msg_data.initialized_lorebooks\n            );\n            merged_data.display_data = structuredClone(merged_data.stat_data);\n            merged_data.delta_data = latest_msg_data.delta_data;\n\n            // 4-5. 遍历并更新描述字段\n            updateDescriptions(\n                '',\n                latest_init_data.stat_data,\n                latest_msg_data.stat_data,\n                merged_data.stat_data\n            );\n\n            //应用\n            await reconcileAndApplySchema(merged_data as MvuData);\n\n            cleanUpMetadata(merged_data.stat_data);\n\n            // 6. 更新变量到最新消息\n            await replaceVariables(merged_data, { type: 'message', message_id: message_id });\n\n            // @ts-expect-error 该函数可用\n            await setChatMessage({}, message_id);\n\n            await replaceVariables(merged_data, { type: 'chat' });\n\n            console.info('InitVar更新完成');\n            toastr.success('InitVar描述已更新', '[MVU]', { timeOut: 3000 });\n        },\n    },\n    {\n        name: '清除旧楼层变量',\n        function: async () => {\n            const result = (await SillyTavern.callGenericPopup(\n                '<h4>清除旧楼层变量信息以减小聊天文件大小避免手机崩溃</h4>请填写要保留变量信息的楼层数 (如 10 为保留最后 10 层)<br><strong>注意: 你将不能正常回退游玩到没保留变量信息的楼层</strong>',\n                SillyTavern.POPUP_TYPE.INPUT,\n                '10'\n            )) as string | undefined;\n            if (!result) {\n                return;\n            }\n            const depth = parseInt(result);\n            if (isNaN(depth)) {\n                toastr.error(\n                    `请输入有效的楼层数, 你输入的是 '${result}'`,\n                    '[MVU]清理旧楼层变量失败'\n                );\n                return;\n            }\n            SillyTavern.chat.slice(0, -depth).forEach(chat_message => {\n                if (chat_message.variables === undefined) {\n                    return;\n                }\n                chat_message.variables = _.range(0, chat_message.swipes?.length ?? 1).map(i => {\n                    if (chat_message?.variables?.[i] === undefined) {\n                        return {};\n                    }\n                    return _.omit(\n                        chat_message.variables[i],\n                        `stat_data`,\n                        `display_data`,\n                        `delta_data`,\n                        `schema`\n                    );\n                });\n            });\n            SillyTavern.saveChat().then(() =>\n                toastr.success(\n                    `已清理旧变量, 保留了最后 ${depth} 层的变量`,\n                    '[MVU]清理旧楼层变量成功'\n                )\n            );\n        },\n    },\n];\n\nexport function registerButtons() {\n    appendInexistentScriptButtons(buttons.map(b => ({ name: b.name, visible: false })));\n    buttons.forEach(b => {\n        eventOn(getButtonEvent(b.name), b.function);\n    });\n}\n","import { handleVariablesInCallback, updateVariable } from '@/function';\nimport {\n    extractRecord,\n    isValueWithDescription,\n    MvuData,\n    variable_events,\n    VariableData,\n} from '@/variable_def';\nimport { loadInitVarData } from '@/variable_init';\n\ntype CommandNames = 'set' | 'insert' | 'delete' | 'add';\n\n/**\n * 对 parseMessage / updateVariables 内部命令解析结果的补充类型说明。\n *\n * 每个字符串元素都是在原始指令中截取的字面量或表达式片段，尚未经过 `parseCommandValue` 解析。\n */\ntype SetCommandArgs =\n    | [path: string, newValueLiteral: string]\n    | [path: string, expectedOldValueLiteral: string, newValueLiteral: string];\n\n/**\n * `_.assign` 与 `_.insert` 支持两种形态：直接追加值，或在指定键/索引处写入。\n */\ntype AssignCommandArgs =\n    | [path: string, valueLiteral: string]\n    | [path: string, indexOrKeyLiteral: string, valueLiteral: string];\n\n/**\n * 删除指令既可以直接给出完整路径，也可以通过第二个参数指定要移除的索引/键或匹配值。\n */\ntype RemoveCommandArgs = [path: string] | [path: string, indexKeyOrValueLiteral: string];\n\n/**\n * `_.add` 始终需要增量或布尔目标，用第二个参数表示。\n */\ntype AddCommandArgs = [path: string, deltaOrToggleLiteral: string];\n\ntype CommandArgsMap = {\n    set: SetCommandArgs;\n    insert: AssignCommandArgs;\n    delete: RemoveCommandArgs;\n    add: AddCommandArgs;\n};\n\n/**\n * CommandInfo 与内部的 Command 结构保持字段布局一致，\n * 但针对不同命令给出了更精确的参数元组形态，方便在外部做类型推断或文档查看。\n */\nexport type CommandInfo = {\n    [K in CommandNames]: {\n        type: K;\n        full_match: string;\n        args: CommandArgsMap[K];\n        reason: string;\n    };\n}[CommandNames];\n\nfunction createMVU() {\n    const mvu = {\n        /**\n         * 变量事件常量集合\n         * 包含三个核心事件，用于监听和响应变量系统的不同更新阶段\n         *\n         * @property {string} SINGLE_VARIABLE_UPDATED - 'mag_variable_updated'\n         * 单个变量更新时触发的事件\n         * - 事件值: 'mag_variable_updated'\n         * - 回调签名: (stat_data: Record<string, any>, path: string, oldValue: any, newValue: any) => void\n         *   - stat_data: 完整的状态数据对象\n         *   - path: 被更新的变量路径（如 'player.health' 或 'items[0].name'）\n         *   - oldValue: 更新前的值\n         *   - newValue: 更新后的新值\n         * - 触发条件: 当通过 setMvuVariable / _.set 语句更新一个变量之后， 会触发这个事件\n         * - 典型用途:\n         *   - 实现变量间的联动逻辑（如等级提升时自动增加属性）\n         *   - 如果某个变量不符合更新条件，则拒绝这次更新。\n         *\n         * @property {string} VARIABLE_UPDATE_STARTED - 'mag_variable_update_started'\n         * 批量变量更新开始时触发的事件\n         * - 事件值: 'mag_variable_update_started'\n         * - 回调签名: (variables: MvuData, out_is_updated: boolean) => void\n         *   - variables: 包含 stat_data、display_data、delta_data 的完整数据对象\n         *   - out_is_updated: 弃用\n         * - 触发时机: parseMessage 或 LLM消息回复结束 开始解析命令之前\n         * - 典型用途:\n         *   - 保存更新前的状态快照\n         *   - 初始化批处理所需的临时数据结构\n         *\n         * @property {string} VARIABLE_UPDATE_ENDED - 'mag_variable_update_ended'\n         * 批量变量更新结束时触发的事件\n         * - 事件值: 'mag_variable_update_ended'\n         * - 回调签名: (variables: MvuData, out_is_updated: boolean) => void\n         *   - variables: 更新完成后的完整数据对象\n         *     - variables.stat_data: 最新的状态数据\n         *     - variables.display_data: 包含变化描述的显示数据\n         *     - variables.delta_data: 仅包含本次更新变化的数据\n         * - 触发时机: parseMessage 或 LLM消息回复结束 完成所有命令的处理后\n         * - 典型用途:\n         *   - 对变量的值进行回滚\n         *   - 根据变量的变更更新事件触发、变量取值（如日替后更新每日任务等）\n         *\n         * @property {string} COMMAND_PARSED - 'mag_command_parsed'\n         * 解析完指令后，开始处理之前触发的事件\n         * - 事件值: 'mag_command_parsed'\n         * - 回调签名: (variables: MvuData, commands: CommandInfo[]) => void\n         *   - variables: 当前上下文的完整数据\n         *   - commands: 待处理的指令列表\n         * - 触发时机: 解析完指令后，开始处理之前\n         * - 典型用途:\n         *   - 保护特定变量：扫描 Command 列表中，是否有对特定变量进行修改的，删除它们\n         *   - 兜底错误的llm输入：如 Gemini 在变量里面加横杠了 悠-纪.好感度 可以通过在这个回调里面调整 Path 来修改为正确的\n         *   - 给角色增加别名：如角色 雪莲 有时候 llm 飙繁体 雪蓮，可以通过这个回调，给角色增加若干个别名，保证各种情况都能正确更新变量。\n         *\n         * @example\n         * // 1. 监听单个变量更新 - 实现变量联动\n         * eventOn(Mvu.events.SINGLE_VARIABLE_UPDATED, (stat_data, path, oldValue, newValue) => {\n         *   console.log(`[变量更新] ${path}: ${oldValue} -> ${newValue}`);\n         *\n         *   // 等级提升时的连锁反应\n         *   if (path === 'player.level' && newValue > oldValue) {\n         *     const levelUp = newValue - oldValue;\n         *     // 每级增加10点生命上限\n         *     const newMaxHealth = stat_data.player.maxHealth + (levelUp * 10);\n         *     Mvu.setMvuVariable(stat_data, 'player.maxHealth', newMaxHealth, {\n         *       reason: `升级奖励(+${levelUp}级)`\n         *     });\n         *   }\n         *\n         *   // 生命值降到0时触发死亡\n         *   if (path === 'player.health' && newValue <= 0 && oldValue > 0) {\n         *     Mvu.setMvuVariable(mvuData, 'player.status', 'dead', {\n         *       reason: '生命值耗尽',\n         *       is_recursive: true  // 允许因此再次触发 events\n         *     });\n         *   }\n         * });\n         *\n         * // 2. 监听批量更新开始 - 准备UI和状态\n         * var value_snapshot = undefined;\n         * eventOn(Mvu.events.VARIABLE_UPDATE_STARTED, (variables, out_is_updated) => {\n         *   console.log('[批量更新] 开始处理变量更新...');\n         *\n         *   // 保存老值\n         *   value_snapshot = variables.stat_data.世界线变更度;\n         * });\n         *\n         * // 3. 监听批量更新结束 - 完成后处理\n         * eventOn(Mvu.events.VARIABLE_UPDATE_ENDED, (variables, out_is_updated) => {\n         *   console.log('[批量更新] 完成，是否有更新:', out_is_updated);\n         *   //使用老值覆盖，禁止llm 更新\n         *   Mvu.setMvuVariable(variables.stat_data, '世界线变更都', value_snapshot);\n         * });\n         *\n         */\n        events: variable_events,\n\n        /**\n         * 解析包含变量更新命令的消息\n         * @param message - 包含 _.set() 命令的消息字符串\n         * @param old_data - 当前的 MvuData 状态\n         * @returns 如果有变量被更新则返回新的 MvuData，否则返回 undefined\n         * @example\n         * const newData = await Mvu.parseMessage(`\n         *   _.set('player.health', 100, 80);//受到伤害\n         *   _.set('player.position', \"城镇\", \"森林\");//移动\n         * `, currentData);\n         */\n        parseMessage: async function (\n            message: string,\n            old_data: MvuData\n        ): Promise<MvuData | undefined> {\n            const variableData: VariableData = {\n                old_variables: old_data,\n            };\n            await handleVariablesInCallback(message, variableData);\n            return variableData.new_variables;\n        },\n\n        /**\n         * 获取指定作用域的 MvuData\n         * @param options - 变量选项，指定获取哪个作用域的变量（chat/message/global等）\n         * @returns MvuData 对象\n         * @example\n         * const chatData = Mvu.getMvuData({ type: 'chat' });\n         * const messageData = Mvu.getMvuData({ type: 'message', message_id: 'latest' });\n         */\n        getMvuData: function (options: VariableOption): MvuData {\n            const result = getVariables(options);\n            return result as MvuData;\n        },\n\n        /**\n         * 替换指定作用域的 MvuData\n         * @param mvu_data - 要设置的新 MvuData\n         * @param options - 变量选项，指定替换哪个作用域的变量\n         * @example\n         * await Mvu.replaceMvuData(newData, { type: 'chat' });\n         */\n        replaceMvuData: async function (mvu_data: MvuData, options: VariableOption): Promise<void> {\n            await replaceVariables(mvu_data, options);\n        },\n\n        /**\n         * 获取当前消息的 MvuData\n         * @returns 当前消息的 MvuData 对象\n         * @example\n         * const currentData = Mvu.getCurrentMvuData();\n         */\n        getCurrentMvuData: function (): MvuData {\n            const variables = getVariables({ type: 'message', message_id: getCurrentMessageId() });\n            return variables as MvuData;\n        },\n\n        /**\n         * 替换当前消息的 MvuData\n         * @param mvu_data - 要设置的新 MvuData\n         * @example\n         * await Mvu.replaceCurrentMvuData(updatedData);\n         */\n        replaceCurrentMvuData: async function (mvu_data: MvuData): Promise<void> {\n            await replaceVariables(mvu_data, {\n                type: 'message',\n                message_id: getCurrentMessageId(),\n            });\n        },\n\n        /**\n         * 重新加载初始变量数据\n         * @param mvu_data - 要重新加载初始数据的 MvuData 对象\n         * @returns 是否加载成功\n         * @example\n         * const success = await Mvu.reloadInitVar(mvuData);\n         */\n        reloadInitVar: async function (mvu_data: MvuData): Promise<boolean> {\n            return await loadInitVarData(mvu_data);\n        },\n\n        /**\n         * 设置单个变量的值\n         * @param mvu_data - 要更新的 MvuData 对象\n         * @param path - 变量路径，支持嵌套路径如 \"player.health\" 或数组索引 \"items[0]\"\n         * @param new_value - 新值\n         * @param options - 可选参数\n         * @param options.reason - 更新原因，会显示在 display_data 中\n         * @param options.is_recursive - 是否触发 mag_variable_updated 事件，默认 false\n         * @returns 更新是否成功\n         * @example\n         * // 简单更新\n         * await Mvu.setMvuVariable(data, 'player.health', 80);\n         *\n         * // 带原因的更新\n         * await Mvu.setMvuVariable(data, 'player.health', 80, { reason: '受到伤害' });\n         *\n         * // 触发事件的更新\n         * await Mvu.setMvuVariable(data, 'player.level', 2, {\n         *   reason: '升级',\n         *   is_recursive: true\n         * });\n         *\n         */\n        setMvuVariable: async function (\n            mvu_data: MvuData,\n            path: string,\n            new_value: any,\n            { reason = '', is_recursive = false }: { reason?: string; is_recursive?: boolean } = {}\n        ): Promise<boolean> {\n            return await updateVariable(mvu_data.stat_data, path, new_value, reason, is_recursive);\n        },\n\n        /**\n         * 获取变量的值\n         * @param mvu_data - MvuData 对象\n         * @param path - 变量路径，支持嵌套路径\n         * @param options - 可选参数\n         * @param options.category - 从哪个数据类别获取：'stat'(默认)/'display'/'delta'\n         * @param options.default_value - 当路径不存在时返回的默认值\n         * @returns 变量值。如果是 ValueWithDescription 类型，返回第一个元素（实际值）\n         * @example\n         * // 获取 stat_data 中的值\n         * const health = Mvu.getMvuVariable(data, 'player.health');\n         *\n         * // 获取 display_data 中的显示值\n         * const healthDisplay = Mvu.getMvuVariable(data, 'player.health', {\n         *   category: 'display'\n         * });\n         *\n         * // 带默认值\n         * const score = Mvu.getMvuVariable(data, 'player.score', {\n         *   default_value: 0\n         * });\n         */\n        getMvuVariable: function (\n            mvu_data: MvuData,\n            path: string,\n            {\n                category = 'stat',\n                default_value = undefined,\n            }: { category?: 'stat' | 'display' | 'delta'; default_value?: any } = {}\n        ): any {\n            let data: Record<string, any>;\n            switch (category) {\n                case 'stat':\n                    data = mvu_data.stat_data;\n                    break;\n                case 'display':\n                    data = mvu_data.display_data!;\n                    break;\n                case 'delta':\n                    data = mvu_data.delta_data!;\n                    break;\n            }\n\n            const value = _.get(data, path, default_value);\n\n            /* 如果是 VWD，取第一个元素 */\n            if (isValueWithDescription(value)) {\n                return value[0];\n            }\n\n            /* 否则直接返回值本身 */\n            return value;\n        },\n\n        /**\n         * 获取指定类别的完整数据记录\n         * @param mvu_data - MvuData 对象\n         * @param category - 数据类别：'stat'/'display'/'delta'\n         * @returns 对应类别的完整数据记录对象\n         * @example\n         * // 获取所有状态数据\n         * const allStatData = Mvu.getRecordFromMvuData(data, 'stat');\n         *\n         * // 获取所有显示数据\n         * const allDisplayData = Mvu.getRecordFromMvuData(data, 'display');\n         *\n         * // 获取所有增量数据\n         * const allDeltaData = Mvu.getRecordFromMvuData(data, 'delta');\n         *\n         * @note 通常用于 LLM 准备 foreach 数据时使用\n         */\n        getRecordFromMvuData: function (\n            mvu_data: MvuData,\n            category: 'stat' | 'display' | 'delta'\n        ): Record<string, any> {\n            return extractRecord(category, mvu_data);\n        },\n    };\n    return mvu;\n}\n\nexport type MVU = ReturnType<typeof createMVU>;\n\nexport type Mvu = MVU;\n\nexport function exportGlobals() {\n    const mvu = createMVU();\n    _.set(window, 'Mvu', mvu);\n    _.set(window.parent, 'Mvu', mvu);\n    eventEmit('global_Mvu_initialized');\n}\n","import { getLastValidVariable, updateVariables } from '@/function';\nimport { useSettingsStore } from '@/settings';\n\n/**\n * 最终的变量更新机制实际上是专门generate 一个新的请求，那个请求会通过 tool_call 直接更新变量。\n * 并不会直接在一条输出消息里面进行 tool_call，因为这种情况很可能 llm 直接无视你的tool call请求（auto/any）\n * 或者 tool call 请求直接把正文肘掉（required）\n * 如果想不肘正文，需要从外部输入格式强调才行，因此直接把 mvu 更新移动到函数调用中不现实。\n * 目前的折衷方式是在 generate 中触发函数调用，在这个情况下可以利用 required 肘掉正文的特性，来精简输出。\n */\n\nexport const MVU_FUNCTION_NAME = 'mvu_VariableUpdate';\nconst mvu_update_call_function_name = 'mvu_updateRound';\n\n/*\n    e.g.: [\n    [\n        {\n            \"index\": 0,\n            \"id\": \"tool_0_mvu_VariableUpdate_2lJb8gNNBxCT4Gi4QDkF\",\n            \"type\": \"function\",\n            \"function\": {\n                \"name\": \"mvu_VariableUpdate\",\n                \"arguments\": \"{\\\"delta\\\":\\\"\\\\n_.set('世界.当前时间','19:30');//赤油们因为饥饿最终选择了吃饲料\\\\n_.set('yukkuri.yukkuri_1.fullness_level',45);\\\\n_.set('yukkuri.yukkuri_1.pickiness_level',40);\\\\n_.set('yukkuri.yukkuri_1.monologue','姆Q……难吃……但是……肚子不饿了……麻麻……什么时候回来……');\\\\n_.set('yukkuri.yukkuri_2.fullness_level',45);\\\\n_.set('yukkuri.yukkuri_2.pickiness_level',40);\\\\n_.set('yukkuri.yukkuri_2.monologue','谬嗯……嚼嚼……不甜……但是……肚子……不空了……麻麻……');\\\\n_.set('yukkuri.yukkuri_3.fullness_level',45);\\\\n_.set('yukkuri.yukkuri_3.pickiness_level',40);\\\\n_.set('yukkuri.yukkuri_3.monologue','麻麻……为什么不给灵缪甜甜……灵缪是坏孩子吗……嚼嚼……好难吃……但是……肚子……');\\\\n_.set('yukkuri.yukkuri_4.fullness_level',30);\\\\n_.set('yukkuri.yukkuri_4.pickiness_level',45);\\\\n_.set('yukkuri.yukkuri_4.monologue','诺杰……好饿……可恶的麻麻……竟然给麻理洽吃这种东西……嚼嚼……呜……好难吃……但是……好饿……');\\\\n_.set('yukkuri.yukkuri_5.fullness_level',30);\\\\n_.set('yukkuri.yukkuri_5.pickiness_level',45);\\\\n_.set('yukkuri.yukkuri_5.monologue','呜……蕾咪才不要吃这种垃圾……蕾咪是高贵的吸血鬼……要吃肉肉……好饿……可恶的麻麻……呜……');\\\\n\\\",\\\"analysis\\\":\\\"\\\\nTime passed: 1 hour. Not a special case, so no dramatic updates.\\\\nVariables to check: 世界.当前时间, yukkuri.yukkuri_1.fullness_level, yukkuri.yukkuri_1.pickiness_level, yukkuri.yukkuri_1.monologue, yukkuri.yukkuri_2.fullness_level, yukkuri.yukkuri_2.pickiness_level, yukkuri.yukkuri_2.monologue, yukkuri.yukkuri_3.fullness_level, yukkuri.yukkuri_3.pickiness_level, yukkuri.yukkuri_3.monologue, yukkuri.yukkuri_4.fullness_level, yukkuri.yukkuri_4.pickiness_level, yukkuri.yukkuri_4.monologue, yukkuri.yukkuri_5.fullness_level, yukkuri.yukkuri_5.pickiness_level, yukkuri.yukkuri_5.monologue\\\\n\\\\n世界.当前时间: Y\\\\nyukkuri.yukkuri_1.fullness_level: Y\\\\nyukkuri.yukkuri_1.pickiness_level: Y\\\\nyukkuri.yukkuri_1.monologue: Y\\\\nyukkuri.yukkuri_2.fullness_level: Y\\\\nyukkuri.yukkuri_2.pickiness_level: Y\\\\nyukkuri.yukkuri_2.monologue: Y\\\\nyukkuri.yukkuri_3.fullness_level: Y\\\\nyukkuri.yukkuri_3.pickiness_level: Y\\\\nyukkuri.yukkuri_3.monologue: Y\\\\nyukkuri.yukkuri_4.fullness_level: Y\\\\nyukkuri.yukkuri_4.pickiness_level: Y\\\\nyukkuri.yukkuri_4.monologue: Y\\\\nyukkuri.yukkuri_5.fullness_level: Y\\\\nyukkuri.yukkuri_5.pickiness_level: Y\\\\nyukkuri.yukkuri_5.monologue: Y\\\\n\\\"}\"\n            }\n        }\n    ]\n]\n */\n\n/** 工具调用的“函数体” */\nexport interface FunctionCallBody {\n    /** 工具名，例如 \"mvu_VariableUpdate\"。你也可以扩成联合类型做更强约束 */\n    name: ToolName;\n    /** 注意：这里是**字符串里包 JSON**。解析请看后面的辅助函数 */\n    arguments: string;\n}\n\n/** 单个工具调用（function-calling 形态） */\nexport interface ToolFunctionCall {\n    index: number; // 这条 tool_call 在“本批次”中的顺序\n    id: string; // 流式/合并用的临时 ID\n    type: 'function'; // 本题场景锁定 function；留扩展点以兼容其它类型\n    function: FunctionCallBody;\n}\n\n/** 一批（组）工具调用：你示例里的内层数组 */\nexport type ToolCallBatch = ToolFunctionCall[];\n\n/** 多批（组）工具调用：你示例的最外层 */\nexport type ToolCallBatches = ToolCallBatch[];\n\n/** 已知的工具名：先收窄 mvu_VariableUpdate，保留 string 兼容其它 */\nexport type ToolName = typeof MVU_FUNCTION_NAME | (string & {});\n\nlet is_function_call_enabled: boolean = false;\n\nexport function setFunctionCallEnabled(enabled: boolean) {\n    is_function_call_enabled = enabled;\n}\n\nexport function unregisterFunction() {\n    SillyTavern.unregisterFunctionTool(MVU_FUNCTION_NAME);\n    SillyTavern.unregisterFunctionTool(mvu_update_call_function_name);\n}\n\n/*\nasync function _onStoryEndCall(_args: any): Promise<string> {\n    const variables = await getLastValidVariable(getLastMessageId());\n    const val = variables.stat_data;\n    let content = ExtraLLMRequestContent;\n    if (val !== undefined) {\n        content = content.replaceAll(\n            \"<%= YAML.stringify(getvar('stat_data'), { blockQuote: 'literal' }) _%>\",\n            YAML.stringify(val, { blockQuote: 'literal' })\n        );\n    }\n    content += `\\nuse \\`${MVUFunctionName}\\` tool to update variables.`;\n    return content;\n}\n*/\n\nasync function onVariableUpdatedCall(args: any): Promise<string> {\n    if (!args?.delta) return '';\n    let message_id = getLastMessageId();\n    let chat_message = getChatMessages(message_id).at(-1);\n    if (chat_message && chat_message.role === 'system') {\n        //移动到前一条，说明这一条是用来显示 mvu 更新的\n        message_id -= 1;\n        chat_message = getChatMessages(message_id).at(-1);\n    }\n    if (!chat_message) {\n        return '';\n    }\n\n    let message_content = chat_message.message;\n    const variables = await getLastValidVariable(message_id);\n    if (!_.has(variables, 'stat_data')) {\n        console.error(`cannot found stat_data for ${message_id}`);\n        return '';\n    }\n\n    const has_variable_modified = await updateVariables(args.delta, variables);\n    if (has_variable_modified) {\n        await replaceVariables(variables, { type: 'chat' });\n    }\n    await replaceVariables(variables, { type: 'message', message_id: message_id });\n\n    message_content += `<UpdateVariable>\\n<Analysis>${args.analysis}</Analysis></Analysis>${args.delta}\\n</UpdateVariable>`;\n\n    if (chat_message.role !== 'user' && !message_content.includes('<StatusPlaceHolderImpl/>')) {\n        //同时追加 PlaceHolder。\n        await setChatMessages(\n            [\n                {\n                    message_id: message_id,\n                    message: message_content + '\\n\\n<StatusPlaceHolderImpl/>',\n                },\n            ],\n            {\n                refresh: 'affected',\n            }\n        );\n    } else {\n        //只追加新增的 UpdateVaraible 块\n        await setChatMessages(\n            [\n                {\n                    message_id: message_id,\n                    message: message_content,\n                },\n            ],\n            {\n                refresh: 'affected',\n            }\n        );\n    }\n    return JSON.stringify(variables.delta_data);\n}\n\nexport function registerFunction() {\n    const { registerFunctionTool } = SillyTavern;\n    if (!registerFunctionTool) {\n        console.debug('MVU: function tools are not supported');\n        return;\n    }\n\n    const mvu_update_schema = Object.freeze({\n        $schema: 'http://json-schema.org/draft-04/schema#',\n        type: 'object',\n        additionalProperties: false,\n        properties: {\n            analysis: {\n                type: 'string',\n                minLength: 1,\n                description:\n                    'Write in ENGLISH. A compact reasoning summary that includes: (1) calculate time passed; (2) decide whether dramatic updates are allowed (special case or sufficiently long time); (3) list every variable name that appears in the <status_description> section BEFORE actual variable analysis, without revealing their contents; (4) for each variable, judge whether it satisfies its change conditions and output only Y/N without reasons; (5) only evaluate stories inside <past_observe> block.',\n            },\n            delta: {\n                type: 'string',\n                minLength: 0,\n                description:\n                    \"multilines Update statements, includes `_.set`,`_.insert`,`_.assign`,`_.delete`,`_.remove`,`_.add`. example: _.set('悠纪.好感度',35);//愉快的一次讨论，悠纪觉得与你一起是开心的\",\n            },\n        },\n        required: ['delta'],\n    });\n\n    registerFunctionTool({\n        name: MVU_FUNCTION_NAME,\n        displayName: 'MVU update',\n        stealth: true,\n        description: 'use this tool to UpdateVariable.',\n        parameters: mvu_update_schema,\n        shouldRegister: () => {\n            if (!is_function_call_enabled) {\n                return false;\n            }\n            const settings = useSettingsStore().settings;\n            return settings.额外模型解析配置.使用函数调用;\n        },\n        action: onVariableUpdatedCall,\n        formatMessage: () => '',\n    });\n\n    /* 目前验证单独新开一个消息来做变量分析和目前的双模型实现(带预设)没有显著区别，且 llm 不一定会调用，因此暂时搁置。\n    const mvuRoundUpdateSchema = Object.freeze({\n        $schema: 'http://json-schema.org/draft-04/schema#',\n        type: 'object',\n        additionalProperties: false,\n\n        properties: {},\n    });\n\n    registerFunctionTool({\n        name: MVUUpdateCallFunctionName,\n        displayName: 'MVU update',\n        stealth: false,\n        description:\n            '**ALWAYS** call this function to end each response. By use this tool, output the `<UpdateVariable>` block is no longer necessary;',\n        parameters: mvuRoundUpdateSchema,\n        shouldRegister: () => {\n            const settings = useSettingsStore().settings;\n            if (settings.更新方式 === '额外轮次函数调用') {\n                const message_id = getLastMessageId();\n                const chat_message = getChatMessages(message_id).at(-1);\n                if (!chat_message) {\n                    return false;\n                }\n\n                let message_content = chat_message.message;\n                //如果已经是一次函数调用的应答，则不进行处理\n                if (message_content.indexOf(`以旁白视角分析最新剧情，按照变量更新规则更新`) != -1)\n                    return false;\n                return true;\n            }\n            return false;\n        },\n        action: onStoryEndCall,\n        formatMessage: () => '',\n    });\n    */\n}\n\nexport function overrideToolRequest(generate_data: any) {\n    const settings = useSettingsStore().settings;\n    if (settings.更新方式 !== '额外模型解析' || settings.额外模型解析配置.使用函数调用 !== true) {\n        return;\n    }\n    if (!is_function_call_enabled) {\n        return;\n    }\n    if (generate_data.tools !== undefined && _.size(generate_data.tools) > 0) {\n        //如 v3之类的模型， required之后效力会更好。\n        /*\n        const message_id = getLastMessageId();\n        const chat_message = getChatMessages(message_id).at(-1);\n        if (!chat_message) {\n            generate_data.tool_choice = 'auto';\n            return;\n        }\n        const function_info = _.get(chat_message, 'extra.tool_invocations');\n        if (_.isArray(function_info)) {\n            //为required 会更可能出发纯prompt的输出\n            generate_data.tool_choice = 'required';\n            return;\n        }\n        */\n        generate_data.tool_choice = 'required';\n    }\n}\n","let sillytavern_version: string = '1.0.0';\nexport async function initSillyTavernVersion(): Promise<void> {\n    sillytavern_version = await fetch('/version')\n        .then(res => res.json())\n        .then(data => data.pkgVersion)\n        .catch(() => '1.0.0');\n}\nexport function getSillyTavernVersion(): string {\n    return sillytavern_version;\n}\n\nexport function isFunctionCallingSupported() {\n    if (!SillyTavern.ToolManager.isToolCallingSupported()) {\n        return false;\n    }\n    if (SillyTavern.chatCompletionSettings.function_calling === false) {\n        return false;\n    }\n    return true;\n}\n\nexport const is_jest_environment =\n    // @ts-expect-error maybe undefined\n    typeof jest !== 'undefined' ||\n    // @ts-expect-error maybe undefined\n    (typeof process !== 'undefined' && process.env?.NODE_ENV === 'test');\n","import { defineComponent as _defineComponent } from 'vue'\nimport { createElementVNode as _createElementVNode, unref as _unref, vModelCheckbox as _vModelCheckbox, withDirectives as _withDirectives, vModelSelect as _vModelSelect, createTextVNode as _createTextVNode, vModelText as _vModelText, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, renderList as _renderList, toDisplayString as _toDisplayString } from \"vue\"\n\nconst _hoisted_1 = { class: \"inline-drawer\" }\nconst _hoisted_2 = { class: \"inline-drawer-content\" }\nconst _hoisted_3 = { class: \"flex-container flexFlowColumn\" }\nconst _hoisted_4 = {\n  class: \"checkbox_label\",\n  for: \"mvu_notification_error\"\n}\nconst _hoisted_5 = {\n  class: \"checkbox_label\",\n  for: \"mvu_notification_extra_model_parsing\"\n}\nconst _hoisted_6 = { class: \"flex-container flexFlowColumn\" }\nconst _hoisted_7 = {\n  class: \"checkbox_label\",\n  for: \"mvu_extra_model_send_preset\"\n}\nconst _hoisted_8 = {\n  class: \"checkbox_label\",\n  for: \"mvu_extra_model_use_function_calling\"\n}\nconst _hoisted_9 = { class: \"flex-container flexFlowColumn\" }\nconst _hoisted_10 = { class: \"flex-container flexFlowColumn\" }\nconst _hoisted_11 = { class: \"flex-container flexFlowColumn\" }\nconst _hoisted_12 = { class: \"flex-container flexFlowColumn\" }\nconst _hoisted_13 = { class: \"flex-container flex\" }\nconst _hoisted_14 = [\"onClick\"]\n\nimport { buttons } from '@/button';\nimport panel_extra_mode_help from '@/panel_extra_mode_help.md';\nimport panel_method_help from '@/panel_method_help.md';\nimport { useSettingsStore } from '@/settings';\nimport { getSillyTavernVersion } from '@/util';\nimport { compare } from 'compare-versions';\nimport { watch } from 'vue';\n\n\nexport default /*@__PURE__*/_defineComponent({\n  __name: 'Panel',\n  setup(__props) {\n\nconst store = useSettingsStore();\n\nwatch(\n    () => store.settings.更新方式,\n    value => {\n        if (value === '额外模型解析' && compare(getSillyTavernVersion(), '1.13.4', '<')) {\n            toastr.error(\n                \"检查到酒馆版本过低，要使用'额外模型解析'请保证酒馆版本大于等于 1.13.4\",\n                \"[MVU]无法使用'额外模型解析'\",\n                { timeOut: 5000 }\n            );\n            store.settings.更新方式 = '随AI输出';\n        }\n    }\n);\n\nwatch(\n    () => store.settings.额外模型解析配置.使用函数调用,\n    value => {\n        if (value === true) {\n            if (!SillyTavern.ToolManager.isToolCallingSupported()) {\n                toastr.error(\n                    \"请在 API 配置 (插头) 处将提示词后处理改为'含工具'的选项\",\n                    \"[MVU]无法使用'函数调用'\",\n                    {\n                        timeOut: 5000,\n                    }\n                );\n            }\n            if (SillyTavern.chatCompletionSettings.function_calling === false) {\n                toastr.error(\"请在预设面板勾选'启用函数调用'选项\", \"[MVU]无法使用'函数调用'\", {\n                    timeOut: 5000,\n                });\n            }\n            store.settings.额外模型解析配置.使用函数调用 = true;\n        }\n    }\n);\n\nasync function showMethodHelp() {\n    SillyTavern.callGenericPopup(panel_method_help, SillyTavern.POPUP_TYPE.TEXT, '', {\n        allowVerticalScrolling: true,\n        leftAlign: true,\n        wide: true,\n    });\n}\n\nasync function showExtraModeHelp() {\n    SillyTavern.callGenericPopup(panel_extra_mode_help, SillyTavern.POPUP_TYPE.TEXT, '', {\n        allowVerticalScrolling: true,\n        leftAlign: true,\n        wide: true,\n    });\n}\n\nreturn (_ctx: any,_cache: any) => {\n  return (_openBlock(), _createElementBlock(\"div\", _hoisted_1, [\n    _cache[25] || (_cache[25] = _createElementVNode(\"div\", { class: \"inline-drawer-toggle inline-drawer-header\" }, [\n      _createElementVNode(\"b\", null, \"MVU 变量框架\"),\n      _createElementVNode(\"div\", { class: \"inline-drawer-icon fa-solid fa-circle-chevron-down down\" })\n    ], -1 /* CACHED */)),\n    _createElementVNode(\"div\", _hoisted_2, [\n      _createElementVNode(\"div\", _hoisted_3, [\n        _cache[11] || (_cache[11] = _createElementVNode(\"div\", null, [\n          _createElementVNode(\"strong\", null, \"通知设置\")\n        ], -1 /* CACHED */)),\n        _createElementVNode(\"label\", _hoisted_4, [\n          _withDirectives(_createElementVNode(\"input\", {\n            id: \"mvu_notification_error\",\n            \"onUpdate:modelValue\": _cache[0] || (_cache[0] = ($event: any) => ((_unref(store).settings.通知.变量更新出错) = $event)),\n            type: \"checkbox\"\n          }, null, 512 /* NEED_PATCH */), [\n            [_vModelCheckbox, _unref(store).settings.通知.变量更新出错]\n          ]),\n          _cache[9] || (_cache[9] = _createElementVNode(\"span\", null, \"变量更新出错时通知\", -1 /* CACHED */))\n        ]),\n        _createElementVNode(\"label\", _hoisted_5, [\n          _withDirectives(_createElementVNode(\"input\", {\n            id: \"mvu_notification_extra_model_parsing\",\n            \"onUpdate:modelValue\": _cache[1] || (_cache[1] = ($event: any) => ((_unref(store).settings.通知.额外模型解析中) = $event)),\n            type: \"checkbox\"\n          }, null, 512 /* NEED_PATCH */), [\n            [_vModelCheckbox, _unref(store).settings.通知.额外模型解析中]\n          ]),\n          _cache[10] || (_cache[10] = _createElementVNode(\"span\", null, \"额外模型解析中通知\", -1 /* CACHED */))\n        ])\n      ]),\n      _cache[23] || (_cache[23] = _createElementVNode(\"hr\", null, null, -1 /* CACHED */)),\n      _createElementVNode(\"div\", _hoisted_6, [\n        _createElementVNode(\"div\", null, [\n          _cache[12] || (_cache[12] = _createElementVNode(\"strong\", null, \"变量更新方式\", -1 /* CACHED */)),\n          _createElementVNode(\"i\", {\n            class: \"fa-solid fa-circle-question fa-sm note-link-span\",\n            style: {\"cursor\":\"pointer\"},\n            onClick: showMethodHelp\n          })\n        ]),\n        _withDirectives(_createElementVNode(\"select\", {\n          id: \"mvu_update_method\",\n          \"onUpdate:modelValue\": _cache[2] || (_cache[2] = ($event: any) => ((_unref(store).settings.更新方式) = $event)),\n          class: \"text_pole\"\n        }, [...(_cache[13] || (_cache[13] = [\n          _createElementVNode(\"option\", { value: \"随AI输出\" }, \"随AI输出\", -1 /* CACHED */),\n          _createElementVNode(\"option\", { value: \"额外模型解析\" }, \"额外模型解析\", -1 /* CACHED */)\n        ]))], 512 /* NEED_PATCH */), [\n          [_vModelSelect, _unref(store).settings.更新方式]\n        ]),\n        (_unref(store).settings.更新方式 === '额外模型解析')\n          ? (_openBlock(), _createElementBlock(_Fragment, { key: 0 }, [\n              _createElementVNode(\"label\", null, [\n                _cache[14] || (_cache[14] = _createTextVNode(\" 解析方式 \", -1 /* CACHED */)),\n                _createElementVNode(\"i\", {\n                  class: \"fa-solid fa-circle-question fa-sm note-link-span\",\n                  style: {\"cursor\":\"pointer\"},\n                  onClick: showExtraModeHelp\n                })\n              ]),\n              _createElementVNode(\"label\", _hoisted_7, [\n                _withDirectives(_createElementVNode(\"input\", {\n                  id: \"mvu_extra_model_send_preset\",\n                  \"onUpdate:modelValue\": _cache[3] || (_cache[3] = ($event: any) => ((_unref(store).settings.额外模型解析配置.发送预设) = $event)),\n                  type: \"checkbox\"\n                }, null, 512 /* NEED_PATCH */), [\n                  [_vModelCheckbox, _unref(store).settings.额外模型解析配置.发送预设]\n                ]),\n                _cache[15] || (_cache[15] = _createElementVNode(\"span\", null, \"发送预设\", -1 /* CACHED */))\n              ]),\n              _createElementVNode(\"label\", _hoisted_8, [\n                _withDirectives(_createElementVNode(\"input\", {\n                  id: \"mvu_extra_model_use_function_calling\",\n                  \"onUpdate:modelValue\": _cache[4] || (_cache[4] = ($event: any) => ((_unref(store).settings.额外模型解析配置.使用函数调用) = $event)),\n                  type: \"checkbox\"\n                }, null, 512 /* NEED_PATCH */), [\n                  [_vModelCheckbox, _unref(store).settings.额外模型解析配置.使用函数调用]\n                ]),\n                _cache[16] || (_cache[16] = _createElementVNode(\"span\", null, \"使用函数调用\", -1 /* CACHED */))\n              ]),\n              _cache[21] || (_cache[21] = _createElementVNode(\"label\", { for: \"mvu_extra_model_source\" }, \"模型来源\", -1 /* CACHED */)),\n              _withDirectives(_createElementVNode(\"select\", {\n                id: \"mvu_extra_model_source\",\n                \"onUpdate:modelValue\": _cache[5] || (_cache[5] = ($event: any) => ((_unref(store).settings.额外模型解析配置.模型来源) = $event)),\n                class: \"text_pole\"\n              }, [...(_cache[17] || (_cache[17] = [\n                _createElementVNode(\"option\", { value: \"与插头相同\" }, \"与插头相同\", -1 /* CACHED */),\n                _createElementVNode(\"option\", { value: \"自定义\" }, \"自定义\", -1 /* CACHED */)\n              ]))], 512 /* NEED_PATCH */), [\n                [_vModelSelect, _unref(store).settings.额外模型解析配置.模型来源]\n              ]),\n              (_unref(store).settings.额外模型解析配置.模型来源 === '自定义')\n                ? (_openBlock(), _createElementBlock(_Fragment, { key: 0 }, [\n                    _createElementVNode(\"div\", _hoisted_9, [\n                      _cache[18] || (_cache[18] = _createElementVNode(\"label\", { for: \"mvu_api_url\" }, \"API 地址\", -1 /* CACHED */)),\n                      _withDirectives(_createElementVNode(\"input\", {\n                        id: \"mvu_api_url\",\n                        \"onUpdate:modelValue\": _cache[6] || (_cache[6] = ($event: any) => ((_unref(store).settings.额外模型解析配置.api地址) = $event)),\n                        type: \"text\",\n                        class: \"text_pole\",\n                        placeholder: \"http://localhost:1234/v1\"\n                      }, null, 512 /* NEED_PATCH */), [\n                        [_vModelText, _unref(store).settings.额外模型解析配置.api地址]\n                      ])\n                    ]),\n                    _createElementVNode(\"div\", _hoisted_10, [\n                      _cache[19] || (_cache[19] = _createElementVNode(\"label\", { for: \"mvu_api_key\" }, \"API 密钥\", -1 /* CACHED */)),\n                      _withDirectives(_createElementVNode(\"input\", {\n                        id: \"mvu_api_key\",\n                        \"onUpdate:modelValue\": _cache[7] || (_cache[7] = ($event: any) => ((_unref(store).settings.额外模型解析配置.密钥) = $event)),\n                        type: \"password\",\n                        class: \"text_pole\",\n                        placeholder: \"留空表示无需密钥\"\n                      }, null, 512 /* NEED_PATCH */), [\n                        [_vModelText, _unref(store).settings.额外模型解析配置.密钥]\n                      ])\n                    ]),\n                    _createElementVNode(\"div\", _hoisted_11, [\n                      _cache[20] || (_cache[20] = _createElementVNode(\"label\", { for: \"mvu_model_name\" }, \"模型名称\", -1 /* CACHED */)),\n                      _withDirectives(_createElementVNode(\"input\", {\n                        id: \"mvu_model_name\",\n                        \"onUpdate:modelValue\": _cache[8] || (_cache[8] = ($event: any) => ((_unref(store).settings.额外模型解析配置.模型名称) = $event)),\n                        type: \"text\",\n                        class: \"text_pole\",\n                        placeholder: \"gemini-2.5-flash\"\n                      }, null, 512 /* NEED_PATCH */), [\n                        [_vModelText, _unref(store).settings.额外模型解析配置.模型名称]\n                      ])\n                    ])\n                  ], 64 /* STABLE_FRAGMENT */))\n                : _createCommentVNode(\"v-if\", true)\n            ], 64 /* STABLE_FRAGMENT */))\n          : _createCommentVNode(\"v-if\", true)\n      ]),\n      _cache[24] || (_cache[24] = _createElementVNode(\"hr\", null, null, -1 /* CACHED */)),\n      _createElementVNode(\"div\", _hoisted_12, [\n        _cache[22] || (_cache[22] = _createElementVNode(\"div\", null, [\n          _createElementVNode(\"strong\", null, \"修复按钮\")\n        ], -1 /* CACHED */)),\n        _createElementVNode(\"div\", _hoisted_13, [\n          (_openBlock(true), _createElementBlock(_Fragment, null, _renderList(_unref(buttons), (button) => {\n            return (_openBlock(), _createElementBlock(\"div\", {\n              key: button.name,\n              class: \"menu_button menu_button_icon interactable\",\n              tabindex: \"0\",\n              role: \"button\",\n              onClick: button.function\n            }, _toDisplayString(button.name), 9 /* TEXT, PROPS */, _hoisted_14))\n          }), 128 /* KEYED_FRAGMENT */))\n        ])\n      ])\n    ])\n  ]))\n}\n}\n\n})","import script from \"./Panel.vue?vue&type=script&setup=true&lang=ts\"\nexport * from \"./Panel.vue?vue&type=script&setup=true&lang=ts\"\n\nconst __exports__ = script;\n\nexport default __exports__","<template>\n    <div class=\"inline-drawer\">\n        <div class=\"inline-drawer-toggle inline-drawer-header\">\n            <b>MVU 变量框架</b>\n            <div class=\"inline-drawer-icon fa-solid fa-circle-chevron-down down\"></div>\n        </div>\n\n        <div class=\"inline-drawer-content\">\n            <div class=\"flex-container flexFlowColumn\">\n                <div><strong>通知设置</strong></div>\n                <label class=\"checkbox_label\" for=\"mvu_notification_error\">\n                    <input\n                        id=\"mvu_notification_error\"\n                        v-model=\"store.settings.通知.变量更新出错\"\n                        type=\"checkbox\"\n                    />\n                    <span>变量更新出错时通知</span>\n                </label>\n                <label class=\"checkbox_label\" for=\"mvu_notification_extra_model_parsing\">\n                    <input\n                        id=\"mvu_notification_extra_model_parsing\"\n                        v-model=\"store.settings.通知.额外模型解析中\"\n                        type=\"checkbox\"\n                    />\n                    <span>额外模型解析中通知</span>\n                </label>\n            </div>\n\n            <hr />\n\n            <div class=\"flex-container flexFlowColumn\">\n                <div>\n                    <strong>变量更新方式</strong>\n                    <i\n                        class=\"fa-solid fa-circle-question fa-sm note-link-span\"\n                        style=\"cursor: pointer\"\n                        @click=\"showMethodHelp\"\n                    />\n                </div>\n                <select id=\"mvu_update_method\" v-model=\"store.settings.更新方式\" class=\"text_pole\">\n                    <option value=\"随AI输出\">随AI输出</option>\n                    <option value=\"额外模型解析\">额外模型解析</option>\n                </select>\n\n                <template v-if=\"store.settings.更新方式 === '额外模型解析'\">\n                    <label>\n                        解析方式\n                        <i\n                            class=\"fa-solid fa-circle-question fa-sm note-link-span\"\n                            style=\"cursor: pointer\"\n                            @click=\"showExtraModeHelp\"\n                        />\n                    </label>\n                    <label class=\"checkbox_label\" for=\"mvu_extra_model_send_preset\">\n                        <input\n                            id=\"mvu_extra_model_send_preset\"\n                            v-model=\"store.settings.额外模型解析配置.发送预设\"\n                            type=\"checkbox\"\n                        />\n                        <span>发送预设</span>\n                    </label>\n                    <label class=\"checkbox_label\" for=\"mvu_extra_model_use_function_calling\">\n                        <input\n                            id=\"mvu_extra_model_use_function_calling\"\n                            v-model=\"store.settings.额外模型解析配置.使用函数调用\"\n                            type=\"checkbox\"\n                        />\n                        <span>使用函数调用</span>\n                    </label>\n\n                    <label for=\"mvu_extra_model_source\">模型来源</label>\n                    <select\n                        id=\"mvu_extra_model_source\"\n                        v-model=\"store.settings.额外模型解析配置.模型来源\"\n                        class=\"text_pole\"\n                    >\n                        <option value=\"与插头相同\">与插头相同</option>\n                        <option value=\"自定义\">自定义</option>\n                    </select>\n\n                    <template v-if=\"store.settings.额外模型解析配置.模型来源 === '自定义'\">\n                        <div class=\"flex-container flexFlowColumn\">\n                            <label for=\"mvu_api_url\">API 地址</label>\n                            <input\n                                id=\"mvu_api_url\"\n                                v-model=\"store.settings.额外模型解析配置.api地址\"\n                                type=\"text\"\n                                class=\"text_pole\"\n                                placeholder=\"http://localhost:1234/v1\"\n                            />\n                        </div>\n\n                        <div class=\"flex-container flexFlowColumn\">\n                            <label for=\"mvu_api_key\">API 密钥</label>\n                            <input\n                                id=\"mvu_api_key\"\n                                v-model=\"store.settings.额外模型解析配置.密钥\"\n                                type=\"password\"\n                                class=\"text_pole\"\n                                placeholder=\"留空表示无需密钥\"\n                            />\n                        </div>\n\n                        <div class=\"flex-container flexFlowColumn\">\n                            <label for=\"mvu_model_name\">模型名称</label>\n                            <input\n                                id=\"mvu_model_name\"\n                                v-model=\"store.settings.额外模型解析配置.模型名称\"\n                                type=\"text\"\n                                class=\"text_pole\"\n                                placeholder=\"gemini-2.5-flash\"\n                            />\n                        </div>\n                    </template>\n                </template>\n            </div>\n\n            <hr />\n\n            <div class=\"flex-container flexFlowColumn\">\n                <div><strong>修复按钮</strong></div>\n                <div class=\"flex-container flex\">\n                    <div\n                        v-for=\"button in buttons\"\n                        :key=\"button.name\"\n                        class=\"menu_button menu_button_icon interactable\"\n                        tabindex=\"0\"\n                        role=\"button\"\n                        @click=\"button.function\"\n                    >\n                        {{ button.name }}\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n</template>\n\n<script setup lang=\"ts\">\nimport { buttons } from '@/button';\nimport panel_extra_mode_help from '@/panel_extra_mode_help.md';\nimport panel_method_help from '@/panel_method_help.md';\nimport { useSettingsStore } from '@/settings';\nimport { getSillyTavernVersion } from '@/util';\nimport { compare } from 'compare-versions';\nimport { watch } from 'vue';\n\nconst store = useSettingsStore();\n\nwatch(\n    () => store.settings.更新方式,\n    value => {\n        if (value === '额外模型解析' && compare(getSillyTavernVersion(), '1.13.4', '<')) {\n            toastr.error(\n                \"检查到酒馆版本过低，要使用'额外模型解析'请保证酒馆版本大于等于 1.13.4\",\n                \"[MVU]无法使用'额外模型解析'\",\n                { timeOut: 5000 }\n            );\n            store.settings.更新方式 = '随AI输出';\n        }\n    }\n);\n\nwatch(\n    () => store.settings.额外模型解析配置.使用函数调用,\n    value => {\n        if (value === true) {\n            if (!SillyTavern.ToolManager.isToolCallingSupported()) {\n                toastr.error(\n                    \"请在 API 配置 (插头) 处将提示词后处理改为'含工具'的选项\",\n                    \"[MVU]无法使用'函数调用'\",\n                    {\n                        timeOut: 5000,\n                    }\n                );\n            }\n            if (SillyTavern.chatCompletionSettings.function_calling === false) {\n                toastr.error(\"请在预设面板勾选'启用函数调用'选项\", \"[MVU]无法使用'函数调用'\", {\n                    timeOut: 5000,\n                });\n            }\n            store.settings.额外模型解析配置.使用函数调用 = true;\n        }\n    }\n);\n\nasync function showMethodHelp() {\n    SillyTavern.callGenericPopup(panel_method_help, SillyTavern.POPUP_TYPE.TEXT, '', {\n        allowVerticalScrolling: true,\n        leftAlign: true,\n        wide: true,\n    });\n}\n\nasync function showExtraModeHelp() {\n    SillyTavern.callGenericPopup(panel_extra_mode_help, SillyTavern.POPUP_TYPE.TEXT, '', {\n        allowVerticalScrolling: true,\n        leftAlign: true,\n        wide: true,\n    });\n}\n</script>\n","// Module\nvar code = `<h1>使用说明</h1> <h2>选择你的变量更新方式</h2> <p>为了让剧情模型更专注于剧情，你可以选择变量更新的方式：</p> <ul> <li><strong>随AI输出</strong>：条目将会正常发给 AI，因此 AI 将会在回复时输出变量更新分析及更新命令，进而更新变量。</li> <li><strong>额外模型解析</strong>：先由一个 AI 专门输出剧情，再由一个 AI 专门解析剧情来更新变量，这个过程中： <ul> <li>名字中有 <code>[mvu_plot]</code> 的条目只会发给输出剧情 AI</li> <li>名字中有 <code>[mvu_update]</code> 的条目只会发给更新变量 AI</li> <li>名字中既没有 <code>[mvu_plot]</code> 也没有 <code>[mvu_update]</code> 将会发送给两个 AI</li> </ul> </li> </ul> <p>除“随AI输出”以外的方式，只有在作者适配世界书后才能使用——但没适配也没关系——如果作者没有适配，则 MVU 依旧会使用“随AI输出”的方式更新变量。</p> <h2>适配世界书</h2> <p>你只需要拆分一下条目、给条目改一下名字就能让世界书适配其他变量更新方式。</p> <p>具体地，MVU 变量框架的提示词分为：</p> <ul> <li><strong>变量列表</strong>：让 AI 知道有什么变量，如 <code>{{get_message_variable::stat_data}}</code>、<code>&#x3C;%= getvar('stat_data') _%></code> 等。</li> <li><strong>变量更新规则</strong>：让 AI 知道变量该如何更新，如<code>药物依赖度应该每分钟增加1点</code>等。</li> <li><strong>输出规则</strong>：让 AI 知道该输出什么来表达变量发生变化，如提示词中要求输出的 <code>&#x3C;UpdateVariable></code> 块。</li> </ul> <p>你需要做的，是给“变量更新规则”和“输出规则”条目的名字添加 <code>[mvu_update]</code>，也就是改成：</p> <ul> <li><code>变量列表</code></li> <li><code>[mvu_update]变量更新规则</code></li> <li><code>[mvu_update]输出规则</code></li> </ul> <p>此外，如果你有其他输出格式，为了不对变量更新 AI 产生干扰，你可以用 <code>[mvu_plot]</code> 指定它只发给负责输出剧情的 AI：</p> <ul> <li><code>[mvu_plot]剧情思维链</code></li> </ul> <p>这样修改名字只是区分什么情况下发送条目, 绿灯等功能依旧会生效.</p> `;\n// Exports\nexport default code;","// Module\nvar code = `<h1>额外模型解析方式</h1> <ul> <li> <p>发送预设：是否要把预设里的条目也发给额外模型</p> <ul> <li>开启：额外模型将会被预设破限; 但是预设往往规定了写作任务，因此额外模型可能会选择继续剧情而不是更新变量。</li> <li>关闭：额外模型可能因为没有被破限而道歉。</li> </ul> </li> <li> <p>使用函数调用：一些渠道的模型支持函数调用</p> <ul> <li>开启：额外模型将使用函数调用来更新变量，不受预设的写作任务影响; 但很多渠道不支持函数调用。</li> <li>关闭：额外模型会通过输出文本来更新变量，可能受预设的写作任务影响而选择继续剧情而不是更新变量。</li> </ul> </li> </ul> <h2>什么时候需要调整解析方式</h2> <p>默认情况下，更新变量的 AI 请求也会包含预设的内容，不过 AI 因此有一定概率受预设的写作任务而继续剧情，导致其实是在推进剧情的同时分析了变量——变量的更新结果实际上是属于未来剧情的，与当前回复并不吻合。</p> <p>如果发现了这种不吻合，在 SFW 的场合可以关闭<code>发送预设</code>，避免预设对变量分析请求的影响; 在 NSFW 的场合，则可以尝试开启<code>使用函数调用</code>来稳定覆盖掉预设中的任务。</p> <p>但<code>函数调用</code>存在限制:</p> <ul> <li>MVU 的<code>函数调用</code>要求支持的函数调用类型为 <code>required</code></li> <li>目前只有一部分模型/提供商/反代支持函数调用</li> <li>已知支持的模型至少包括 Claude 4+、Gemini 2.5 Pro、Deepseek V3/V3.1 (官方渠道，硅基流动等的不支持); 如果你使用的是上述模型，但是请求报错，建议换个渠道使用这些模型</li> </ul> `;\n// Exports\nexport default code;","import Panel from '@/Panel.vue';\nimport { createPinia } from 'pinia';\nimport { createApp } from 'vue';\n\nconst app = createApp(Panel);\n\nfunction teleportStyle() {\n    if ($(`head > div[script_id=\"${getScriptId()}\"]`).length > 0) {\n        return;\n    }\n    const $div = $(`<div>`)\n        .attr('script_id', getScriptId())\n        .append($(`head > style`, document).clone());\n    $('head').append($div);\n}\nexport function initPanel() {\n    teleportStyle();\n\n    const $app = $('<div>').attr('script_id', getScriptId());\n    $('#extensions_settings2').append($app);\n\n    app.use(createPinia()).mount($app[0]);\n}\n\nfunction deteleportStyle() {\n    $(`head > div[script_id=\"${getScriptId()}\"]`).remove();\n}\nexport function destroyPanel() {\n    app.unmount();\n\n    $(`#extensions_settings2 > div[script_id=\"${getScriptId()}\"]`).remove();\n\n    deteleportStyle();\n}\n","import { registerButtons } from '@/button';\nimport { exportGlobals } from '@/export_globals';\nimport { handleVariablesInCallback, handleVariablesInMessage, updateVariable } from '@/function';\nimport {\n    MVU_FUNCTION_NAME,\n    overrideToolRequest,\n    registerFunction,\n    setFunctionCallEnabled,\n    ToolCallBatches,\n    unregisterFunction,\n} from '@/function_call';\nimport { destroyPanel, initPanel } from '@/panel';\nimport { useSettingsStore } from '@/settings';\nimport {\n    getSillyTavernVersion,\n    initSillyTavernVersion,\n    is_jest_environment,\n    isFunctionCallingSupported,\n} from '@/util';\nimport { exported_events, ExtraLLMRequestContent } from '@/variable_def';\nimport { initCheck } from '@/variable_init';\nimport { compare } from 'compare-versions';\n\n/**\n * 标记是否处于额外模型解析\n */\nlet duringExtraCall = false;\n\n/**\n * 记录世界书是否支持额外模型\n */\nlet isExtraModelSupported = false;\n\nasync function handlePromptFilter(lores: {\n    globalLore: Record<string, any>[];\n    characterLore: Record<string, any>[];\n    chatLore: Record<string, any>[];\n    personaLore: Record<string, any>[];\n}) {\n    const settings = useSettingsStore().settings;\n\n    //每次开始解析时都进行重置。\n    isExtraModelSupported = false;\n\n    //在这个回调中，会将所有lore的条目传入，此处可以去除所有 [mvu_update] 相关的条目，避免在非更新的轮次中输出相关内容。\n    if (settings.更新方式 === '随AI输出') {\n        return;\n    }\n    if (settings.额外模型解析配置.使用函数调用 && !isFunctionCallingSupported()) {\n        toastr.warning(\n            '当前预设/API 不支持函数调用，已退化回 `随AI输出`',\n            '[MVU]无法使用函数调用',\n            {\n                timeOut: 2000,\n            }\n        );\n        return;\n    }\n\n    const update_regex = /\\[mvu_update\\]/i;\n    const plot_regex = /\\[mvu_plot\\]/i;\n    const remove_and_check = (lore: Record<string, any>[]) => {\n        const filtered = _.remove(lore, entry => {\n            const is_update_regex = entry.comment.match(update_regex);\n            const is_plot_regex = entry.comment.match(plot_regex);\n            return duringExtraCall\n                ? is_plot_regex && !is_update_regex\n                : !is_plot_regex && is_update_regex;\n        });\n        if (filtered.length > 0) {\n            isExtraModelSupported = true;\n        }\n    };\n    remove_and_check(lores.globalLore);\n    remove_and_check(lores.characterLore);\n    remove_and_check(lores.chatLore);\n    remove_and_check(lores.personaLore);\n}\n\nlet vanilla_parseToolCalls: any = null;\n\nasync function onMessageReceived(message_id: number) {\n    const current_chatmsg = getChatMessages(message_id).at(-1);\n    if (!current_chatmsg) {\n        return;\n    }\n\n    const message_content = current_chatmsg.message;\n    if (message_content.length < 5) {\n        //MESSAGE_RECEIVED 有时候也会在请求的一开始递交，会包含一个 \"...\" 的消息\n        return;\n    }\n\n    const settings = useSettingsStore().settings;\n    duringExtraCall = false;\n\n    if (\n        settings.更新方式 === '随AI输出' ||\n        (settings.额外模型解析配置.使用函数调用 && !isFunctionCallingSupported()) || //与上面相同的退化情况。\n        isExtraModelSupported === false // 角色卡未适配时, 依旧使用 \"随AI输出\"\n    ) {\n        await handleVariablesInMessage(message_id);\n        return;\n    }\n\n    duringExtraCall = true;\n    let user_input = ExtraLLMRequestContent;\n    if (settings.额外模型解析配置.使用函数调用) {\n        user_input += `\\n use \\`mvu_VariableUpdate\\` tool to update variables.`;\n    }\n    const generateFn = settings.额外模型解析配置.发送预设 === false ? generateRaw : generate;\n\n    let result: string = '';\n    let retries = 0;\n\n    try {\n        setFunctionCallEnabled(true);\n        //因为部分预设会用到 {{lastUserMessage}}，因此进行修正。\n        console.log('Before RegisterMacro');\n        if (compare(getSillyTavernVersion(), '1.13.4', '<=')) {\n            //https://github.com/SillyTavern/SillyTavern/pull/4614\n            //需要等待1s来错开 dry_run\n            await new Promise(res => setTimeout(res, 1000));\n        }\n        SillyTavern.registerMacro('lastUserMessage', () => {\n            return user_input;\n        });\n        console.log('After RegisterMacro');\n        const promptInjects: InjectionPrompt[] = [\n            {\n                id: '817114514',\n                position: 'in_chat',\n                depth: 0,\n                should_scan: false,\n                role: 'system',\n                content: user_input,\n            },\n            {\n                id: '817114515',\n                position: 'in_chat',\n                depth: 2,\n                should_scan: false,\n                role: 'assistant',\n                content: '<past_observe>',\n            },\n            {\n                id: '817114516',\n                position: 'in_chat',\n                depth: 1,\n                should_scan: false,\n                role: 'assistant',\n                content: '</past_observe>',\n            },\n        ]; //部分预设会在后面强调 user_input 的演绎行为，需要找个方式肘掉它\n\n        let collected_tool_calls: ToolCallBatches | undefined = undefined;\n        if (settings.额外模型解析配置.使用函数调用) {\n            vanilla_parseToolCalls = SillyTavern.ToolManager.parseToolCalls;\n            const vanilla_bound = SillyTavern.ToolManager.parseToolCalls.bind(\n                SillyTavern.ToolManager\n            );\n            SillyTavern.ToolManager.parseToolCalls = (tool_calls: any, parsed: any) => {\n                vanilla_bound(tool_calls, parsed);\n                collected_tool_calls = tool_calls;\n            };\n        }\n\n        for (retries = 0; retries < 3; retries++) {\n            if (settings.通知.额外模型解析中) {\n                toastr.info(\n                    `[MVU]额外模型分析变量更新中...${retries === 0 ? '' : ` 重试 ${retries}/3`}`\n                );\n            }\n            collected_tool_calls = undefined;\n            const current_result = await generateFn(\n                settings.额外模型解析配置.模型来源 === '与插头相同'\n                    ? {\n                          user_input: `遵循后续的 <must> 指令`,\n                          injects: promptInjects,\n                          max_chat_history: 2,\n                          should_stream: settings.额外模型解析配置.使用函数调用,\n                      }\n                    : {\n                          user_input: `遵循后续的 <must> 指令`,\n                          custom_api: {\n                              apiurl: settings.额外模型解析配置.api地址,\n                              key: settings.额外模型解析配置.密钥,\n                              model: settings.额外模型解析配置.模型名称,\n                          },\n                          injects: promptInjects,\n                          should_stream: settings.额外模型解析配置.使用函数调用,\n                      }\n            );\n            if (collected_tool_calls !== undefined) {\n                const content = _.get(collected_tool_calls as ToolCallBatches, '[0]');\n                if (content) {\n                    const mvu_function_call = _(content).findLast(\n                        fn => fn.function.name === MVU_FUNCTION_NAME\n                    );\n                    if (mvu_function_call) {\n                        const mvu_function_call_content = _.get(\n                            mvu_function_call,\n                            'function.arguments'\n                        );\n                        if (mvu_function_call_content) {\n                            try {\n                                const mvu_function_call_json =\n                                    JSON.parse(mvu_function_call_content);\n                                if (\n                                    mvu_function_call_json.delta &&\n                                    mvu_function_call_json.delta.length > 5\n                                ) {\n                                    result = `<UpdateVariable><Analyze>${mvu_function_call_json.analysis}</Analyze>${mvu_function_call_json.delta}</UpdateVariable>`;\n                                    break;\n                                }\n                            } catch (e) {\n                                console.log(\n                                    `failed to parse function call content,retry: ${mvu_function_call_content}: ${e}`\n                                );\n                            }\n                        }\n                    }\n                }\n            }\n            console.log(`Vanilla Response: ${current_result}`);\n            if (current_result.indexOf('<UpdateVariable>') !== -1) {\n                //至少要出现一个变量设置语句，因为可能会有跑完thinking 直接截断的情况。\n                //此外还存在<UpdateVariable><UpdateVariable></UpdateVariable> 的情况\n                //因为可能在 thinking 中提及需要输出 <UpdateVariable> 块。\n                const lastUpdateVariableIndex = current_result.lastIndexOf('<UpdateVariable>');\n                const last_content = current_result\n                    .slice(lastUpdateVariableIndex + 16)\n                    .replace(/<\\/UpdateVariable>/g, '');\n                const fn_call_match =\n                    /_\\.(?:set|insert|assign|remove|unset|delete|add)\\s*\\([\\s\\S]*?\\)\\s*;/.test(\n                        last_content\n                    );\n                if (fn_call_match) {\n                    result = `<UpdateVariable>${last_content}</UpdateVariable>`;\n                    break;\n                }\n            }\n        }\n    } catch (e) {\n        console.error(`变量更新请求发生错误: ${e}`);\n        await handleVariablesInMessage(message_id);\n        return;\n    } finally {\n        if (vanilla_parseToolCalls !== null) {\n            SillyTavern.ToolManager.parseToolCalls = vanilla_parseToolCalls;\n            vanilla_parseToolCalls = null;\n        }\n        SillyTavern.unregisterMacro('lastUserMessage');\n        setFunctionCallEnabled(false);\n        duringExtraCall = false;\n    }\n\n    if (result !== '') {\n        // QUESTION: 目前的方案是直接将额外模型对变量的解析结果直接尾附到楼层中, 会不会像 tool calling 那样把结果新建为一个楼层更好?\n        const chat_message = getChatMessages(message_id);\n\n        await setChatMessages(\n            [\n                {\n                    message_id,\n                    message: chat_message[0].message + result,\n                },\n            ],\n            {\n                refresh: 'none',\n            }\n        );\n    } else {\n        toastr.error('建议调整变量更新方式/额外模型解析模式', '[MVU]额外模型分析变量更新失败');\n    }\n    await handleVariablesInMessage(message_id);\n}\n\n$(async () => {\n    if (compare(await getTavernHelperVersion(), '3.4.17', '<')) {\n        toastr.warning(\n            '酒馆助手版本过低, 无法正常处理, 请更新至 3.4.17 或更高版本（建议保持酒馆助手最新）',\n            '[MVU]不支持当前酒馆助手版本'\n        );\n    }\n\n    await initSillyTavernVersion();\n\n    initPanel();\n\n    const store = useSettingsStore();\n    if (store.settings.internal.已提醒新配置界面 === false) {\n        toastr.info(\n            '配置界面位于酒馆扩展界面-「正则」下方, 请点开了解新功能或自定义配置',\n            '[MVU]已更新独立配置界面',\n            {\n                timeOut: 5000,\n            }\n        );\n        store.settings.internal.已提醒新配置界面 = true;\n    }\n\n    exportGlobals();\n    registerButtons();\n    eventOn(tavern_events.GENERATION_STARTED, initCheck);\n    eventOn(tavern_events.MESSAGE_SENT, initCheck);\n    eventOn(tavern_events.MESSAGE_SENT, handleVariablesInMessage);\n\n    // 3.6.5 版本以上酒馆助手的 `tavern_events` 才存在这个字段, 因此直接用字符串\n    eventOn('worldinfo_entries_loaded', handlePromptFilter);\n\n    eventOn(\n        tavern_events.MESSAGE_RECEIVED,\n        is_jest_environment ? onMessageReceived : _.throttle(onMessageReceived, 3000)\n    );\n\n    eventOn(exported_events.INVOKE_MVU_PROCESS, handleVariablesInCallback);\n    eventOn(exported_events.UPDATE_VARIABLE, updateVariable);\n    eventOn(tavern_events.CHAT_COMPLETION_SETTINGS_READY, overrideToolRequest);\n\n    _.set(window.parent, 'handleVariablesInMessage', handleVariablesInMessage);\n    registerFunction();\n\n    toastr.info(\n        `构建信息: ${__BUILD_DATE__ ?? 'Unknown'} (${__COMMIT_ID__ ?? 'Unknown'})`,\n        '[MVU]脚本加载成功'\n    );\n});\n\n$(window).on('pagehide', () => {\n    if (vanilla_parseToolCalls !== null) {\n        SillyTavern.ToolManager.parseToolCalls = vanilla_parseToolCalls;\n        vanilla_parseToolCalls = null;\n    }\n    destroyPanel();\n    unregisterFunction();\n});\n"],"names":["assertVWD","_flag","_v","isValueWithDescriptionStatData","value","Array","isArray","length","isArraySchema","type","isObjectSchema","variable_events","SINGLE_VARIABLE_UPDATED","VARIABLE_UPDATE_ENDED","VARIABLE_UPDATE_STARTED","COMMAND_PARSED","exported_events","__WEBPACK_EXTERNAL_MODULE_https_testingcf_jsdelivr_net_npm_mathjs_esm_aec644b1__","EXTENSIBLE_MARKER","generateSchema","data","oldSchemaNode","parentRecursiveExtensible","oldElementType","template","isExtensible","isRecursiveExtensible","extensible","recursiveExtensible","elementType","console","error","metaElementIndex","findIndex","item","_","isObject","isDate","metaElement","undefined","$meta","splice","log","markerIndex","indexOf","schema_node","typedData","oldProperties","oldExtensible","oldRecursiveExtensible","properties","schemaNode","parentMeta","key","oldChildNode","childRecursiveExtensible","childSchema","isRequired","required","includes","dataType","getSchemaForPath","schema","path","pathSegments","toPath","currentSchema","segment","test","reconcileAndApplySchema","variables","newSchema","cloneDeep","stat_data","newSchemaWithProps","strictTemplate","strictSet","concatTemplateArray","has","cleanUpMetadata","i","Vue","z","Settings","default","prefault","internal","useSettingsStore","defineStore","settings","ref","parse","get","SillyTavern","extensionSettings","watch","new_settings","set","toRaw","saveSettingsDebounced","deep","trimQuotesAndBackslashes","str","isString","replace","applyTemplate","strict_array_cast","array_merge_concat","value_is_object","value_is_array","template_is_array","merge","concat","parseCommandValue","valStr","trimmed","trim","JSON","e","startsWith","endsWith","result","Function","err","scope","Math","math","toString","parseFloat","toPrecision","YAML","findMatchingCloseParen","startPos","parenCount","inQuote","quoteChar","char","prevChar","parseParameters","paramsString","params","currentParam","bracketCount","braceCount","push","async","getLastValidVariable","message_id","structuredClone","chat","slice","map","chat_message","swipe_id","findLast","getVariables","pathFix","segments","currentSegment","inQuotes","join","updateVariable","new_value","reason","is_recursive","display_data","$internal","delta_data","currentValue","oldValue","reason_str","display_str","stringify","info","eventEmit","stringNewValue","updateVariables","current_message_content","out_status","delta_status","commands","inputText","results","setMatch","substring","match","index","commandType","setStart","openParen","closeParen","endPos","comment","potentialComment","fullMatch","isValid","full_match","args","extractCommands","substitudeMacros","error_info","current_command","variable_modified","outError","message","warn","error_last","error_command","strict_template","concat_template_array","strict_set","cmd","command","newValue","Date","toISOString","isPathVWD","Number","oldValueCopy","finalNewValue","targetPath","existingValue","targetSchema","newKey","String","successful","valueToAssign","collection","keyOrIndex","Error","keyOrIndexToRemove","containerPath","pathParts","lastPart","pop","containerSchema","keyString","targetToRemove","itemRemoved","unset","originalArray","indexToRemove","isEqual","keys","Object","keyToRemove","initialValue","valueToAdd","isVWD","potentialDate","parsedDate","isNaN","getTime","delta","newDate","finalValueToSet","base_command","toastr","warning","timeOut","handleVariablesInMessage","getChatMessages","at","message_content","request_message_id","updater","initialized_lorebooks","updateVariablesWith","role","setChatMessages","refresh","handleVariablesInCallback","in_out_variable_info","old_variables","new_variables","updateDescriptions","_init_path","init_data","msg_data","target_data","forEach","current_path","msgValue","targetObj","description","msg_array","current_target","description_path","initCheck","getLastMessageId","oldArray","newObject","lorebookName","is_updated","loadInitVarData","isEmpty","generated_schema","assign","last_msg","include_swipes","swipes_data","Promise","all","swipes","swipe","current_data","setChatMessage","entries","escapeHtml","_e","dst_setting","scan_depth","context_percentage","budget_cap","min_activations","max_depth","max_recursion_steps","insertion_strategy","include_names","recursive","case_sensitive","match_whole_words","use_group_scoring","overflow_alert","getLorebookSettings","setLorebookSettings","updateLorebookSettings","mvu_data","lorebook_list","enabled_lorebook_list","selected_global_lorebooks","char_lorebook","getCurrentCharPrimaryLorebook","getEnabledLorebookList","current_lorebook","init_entries","getLorebookEntries","entry","toLowerCase","content","parsedData","parseError","parseDocument","toJS","e2","e3","buttons","name","function","latest_init_data","latest_msg_data","merged_data","replaceVariables","success","callGenericPopup","POPUP_TYPE","INPUT","depth","parseInt","range","omit","saveChat","then","createMVU","events","parseMessage","old_data","variableData","getMvuData","options","replaceMvuData","getCurrentMvuData","getCurrentMessageId","replaceCurrentMvuData","reloadInitVar","setMvuVariable","getMvuVariable","category","default_value","isValueWithDescription","getRecordFromMvuData","game_data","extractRecord","MVU_FUNCTION_NAME","is_function_call_enabled","setFunctionCallEnabled","enabled","onVariableUpdatedCall","analysis","overrideToolRequest","generate_data","tools","size","tool_choice","sillytavern_version","getSillyTavernVersion","isFunctionCallingSupported","ToolManager","isToolCallingSupported","chatCompletionSettings","function_calling","is_jest_environment","jest","process","_hoisted_1","class","_hoisted_2","_hoisted_3","_hoisted_4","for","_hoisted_5","_hoisted_6","_hoisted_7","_hoisted_8","_hoisted_9","_hoisted_10","_hoisted_11","_hoisted_12","_hoisted_13","_hoisted_14","__name","setup","__props","store","showMethodHelp","TEXT","allowVerticalScrolling","leftAlign","wide","showExtraModeHelp","compare","_ctx","_cache","id","$event","style","placeholder","button","tabindex","app","createApp","Panel","initPanel","$","getScriptId","$div","attr","append","document","clone","teleportStyle","$app","use","createPinia","mount","destroyPanel","unmount","remove","duringExtraCall","isExtraModelSupported","handlePromptFilter","lores","update_regex","plot_regex","remove_and_check","lore","is_update_regex","is_plot_regex","globalLore","characterLore","chatLore","personaLore","vanilla_parseToolCalls","onMessageReceived","current_chatmsg","user_input","generateFn","generateRaw","generate","retries","res","setTimeout","registerMacro","promptInjects","position","should_scan","collected_tool_calls","parseToolCalls","vanilla_bound","bind","tool_calls","parsed","current_result","injects","max_chat_history","should_stream","custom_api","apiurl","model","mvu_function_call","fn","mvu_function_call_content","mvu_function_call_json","lastUpdateVariableIndex","lastIndexOf","last_content","unregisterMacro","getTavernHelperVersion","fetch","json","pkgVersion","catch","initSillyTavernVersion","mvu","window","parent","exportGlobals","appendInexistentScriptButtons","b","visible","eventOn","getButtonEvent","tavern_events","GENERATION_STARTED","MESSAGE_SENT","MESSAGE_RECEIVED","throttle","CHAT_COMPLETION_SETTINGS_READY","registerFunctionTool","debug","mvu_update_schema","freeze","$schema","additionalProperties","minLength","displayName","stealth","parameters","shouldRegister","action","formatMessage","registerFunction","on","unregisterFunctionTool"],"sourceRoot":""}